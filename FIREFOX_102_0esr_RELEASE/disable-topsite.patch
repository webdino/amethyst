diff --git a/browser/components/newtab/lib/ASRouter.jsm b/browser/components/newtab/lib/ASRouter.jsm
--- a/browser/components/newtab/lib/ASRouter.jsm
+++ b/browser/components/newtab/lib/ASRouter.jsm
@@ -52,9 +52,6 @@ const { OnboardingMessageProvider } = Ch
 const { RemoteSettings } = ChromeUtils.import(
   "resource://services-settings/remote-settings.js"
 );
-const { CFRPageActions } = ChromeUtils.import(
-  "resource://activity-stream/lib/CFRPageActions.jsm"
-);
 const { AttributionCode } = ChromeUtils.import(
   "resource:///modules/AttributionCode.jsm"
 );
@@ -92,9 +89,6 @@ const JEXL_PROVIDER_CACHE = new Set(["sn
 // To observe the app locale change notification.
 const TOPIC_INTL_LOCALE_CHANGED = "intl:app-locales-changed";
 const TOPIC_EXPERIMENT_FORCE_ENROLLED = "nimbus:force-enroll";
-// To observe the pref that controls if ASRouter should use the remote Fluent files for l10n.
-const USE_REMOTE_L10N_PREF =
-  "browser.newtabpage.activity-stream.asrouter.useRemoteL10n";
 
 // Experiment groups that need to report the reach event in Messaging-Experiments.
 // If you're adding new groups to it, make sure they're also added in the
@@ -852,14 +846,6 @@ class _ASRouter {
     await this._maybeUpdateL10nAttachment();
   }
 
-  observe(aSubject, aTopic, aPrefName) {
-    switch (aPrefName) {
-      case USE_REMOTE_L10N_PREF:
-        CFRPageActions.reloadL10n();
-        break;
-    }
-  }
-
   toWaitForInitFunc(func) {
     return (...args) => this.waitForInitialized.then(() => func(...args));
   }
@@ -940,7 +926,6 @@ class _ASRouter {
       this._onExperimentForceEnrolled,
       TOPIC_EXPERIMENT_FORCE_ENROLLED
     );
-    Services.prefs.addObserver(USE_REMOTE_L10N_PREF, this);
     // sets .initialized to true and resolves .waitForInitialized promise
     this._finishInitializing();
     return this.state;
@@ -973,9 +958,6 @@ class _ASRouter {
       this._onExperimentForceEnrolled,
       TOPIC_EXPERIMENT_FORCE_ENROLLED
     );
-    Services.prefs.removeObserver(USE_REMOTE_L10N_PREF, this);
-    // If we added any CFR recommendations, they need to be removed
-    CFRPageActions.clearRecommendations();
     this._resetInitialization();
   }
 
@@ -1167,39 +1149,6 @@ class _ASRouter {
           ToolbarPanelHub.forceShowMessage(browser, message);
         }
         break;
-      case "cfr_doorhanger":
-      case "milestone_message":
-        if (force) {
-          CFRPageActions.forceRecommendation(
-            browser,
-            message,
-            this.dispatchCFRAction
-          );
-        } else {
-          CFRPageActions.addRecommendation(
-            browser,
-            trigger.param && trigger.param.host,
-            message,
-            this.dispatchCFRAction
-          );
-        }
-        break;
-      case "cfr_urlbar_chiclet":
-        if (force) {
-          CFRPageActions.forceRecommendation(
-            browser,
-            message,
-            this.dispatchCFRAction
-          );
-        } else {
-          CFRPageActions.addRecommendation(
-            browser,
-            null,
-            message,
-            this.dispatchCFRAction
-          );
-        }
-        break;
       case "toolbar_badge":
         ToolbarBadgeHub.registerBadgeNotificationListener(message, { force });
         break;
diff --git a/browser/modules/AboutNewTab.jsm b/browser/modules/AboutNewTab.jsm
--- a/browser/modules/AboutNewTab.jsm
+++ b/browser/modules/AboutNewTab.jsm
@@ -14,14 +14,10 @@ const { XPCOMUtils } = ChromeUtils.impor
 const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetters(this, {
-  ActivityStream: "resource://activity-stream/lib/ActivityStream.jsm",
   ObjectUtils: "resource://gre/modules/ObjectUtils.jsm",
-  RemotePages:
-    "resource://gre/modules/remotepagemanager/RemotePageManagerParent.jsm",
 });
 
 const ABOUT_URL = "about:newtab";
-const PREF_ACTIVITY_STREAM_DEBUG = "browser.newtabpage.activity-stream.debug";
 const TOPIC_APP_QUIT = "quit-application-granted";
 const BROWSER_READY_NOTIFICATION = "sessionstore-windows-restored";
 
@@ -34,16 +30,8 @@ const AboutNewTab = {
   // AboutNewTab
   initialized: false,
 
-  pageListener: null,
-  isPageListenerOverridden: false,
   willNotifyUser: false,
 
-  _activityStreamEnabled: false,
-  activityStream: null,
-  activityStreamDebug: false,
-
-  _cachedTopSites: null,
-
   _newTabURL: ABOUT_URL,
   _newTabURLOverridden: false,
 
@@ -58,17 +46,6 @@ const AboutNewTab = {
    */
   init(pageListener) {
     Services.obs.addObserver(this, TOPIC_APP_QUIT);
-    if (!AppConstants.RELEASE_OR_BETA) {
-      XPCOMUtils.defineLazyPreferenceGetter(
-        this,
-        "activityStreamDebug",
-        PREF_ACTIVITY_STREAM_DEBUG,
-        false,
-        () => {
-          this.notifyChange();
-        }
-      );
-    }
 
     XPCOMUtils.defineLazyPreferenceGetter(
       this,
@@ -83,21 +60,6 @@ const AboutNewTab = {
     // More initialization happens here
     this.toggleActivityStream(true);
     this.initialized = true;
-
-    if (this.isPageListenerOverridden) {
-      return;
-    }
-
-    // Since `init` can be called via `reset` at a later time with an existing
-    // pageListener, we want to only add the observer if we are initializing
-    // without this pageListener argument. This means it was the first call to `init`
-    if (!pageListener) {
-      Services.obs.addObserver(this, BROWSER_READY_NOTIFICATION);
-    }
-
-    this.pageListener =
-      pageListener ||
-      new RemotePages(["about:home", "about:newtab", "about:welcome"]);
   },
 
   /**
@@ -111,22 +73,8 @@ const AboutNewTab = {
    * @param {Boolean}   forceState      force state change
    */
   toggleActivityStream(stateEnabled, forceState = false) {
-    if (
-      !forceState &&
-      (this._newTabURLOverridden ||
-        stateEnabled === this._activityStreamEnabled)
-    ) {
       // exit there is no change of state
       return false;
-    }
-    if (stateEnabled) {
-      this._activityStreamEnabled = true;
-    } else {
-      this._activityStreamEnabled = false;
-    }
-
-    this._newTabURL = ABOUT_URL;
-    return true;
   },
 
   get newTabURL() {
@@ -154,7 +102,7 @@ const AboutNewTab = {
   },
 
   get activityStreamEnabled() {
-    return this._activityStreamEnabled;
+    return false;
   },
 
   resetNewTabURL() {
@@ -172,45 +120,6 @@ const AboutNewTab = {
    * onBrowserReady - Continues the initialization of Activity Stream after browser is ready.
    */
   onBrowserReady() {
-    if (this.activityStream && this.activityStream.initialized) {
-      return;
-    }
-
-    this.activityStream = new ActivityStream();
-    try {
-      this.activityStream.init();
-      this._subscribeToActivityStream();
-    } catch (e) {
-      Cu.reportError(e);
-    }
-  },
-
-  _subscribeToActivityStream() {
-    let unsubscribe = this.activityStream.store.subscribe(() => {
-      // If the top sites changed, broadcast "newtab-top-sites-changed". We
-      // ignore changes to the `screenshot` property in each site because
-      // screenshots are generated at times that are hard to predict and it ends
-      // up interfering with tests that rely on "newtab-top-sites-changed".
-      // Observers likely don't care about screenshots anyway.
-      let topSites = this.activityStream.store
-        .getState()
-        .TopSites.rows.map(site => {
-          site = { ...site };
-          delete site.screenshot;
-          return site;
-        });
-      if (!ObjectUtils.deepEqual(topSites, this._cachedTopSites)) {
-        this._cachedTopSites = topSites;
-        Services.obs.notifyObservers(null, "newtab-top-sites-changed");
-      }
-    });
-    this._unsubscribeFromActivityStream = () => {
-      try {
-        unsubscribe();
-      } catch (e) {
-        Cu.reportError(e);
-      }
-    };
   },
 
   /**
@@ -218,30 +127,12 @@ const AboutNewTab = {
    *        if it exists.
    */
   uninit() {
-    if (this.activityStream) {
-      this._unsubscribeFromActivityStream?.();
-      this.activityStream.uninit();
-      this.activityStream = null;
-    }
-
-    if (this.pageListener) {
-      this.pageListener.destroy();
-      this.pageListener = null;
-    }
     this.initialized = false;
   },
 
   overridePageListener(shouldPassPageListener) {
     this.isPageListenerOverridden = true;
 
-    const pageListener = this.pageListener;
-    if (!pageListener) {
-      return null;
-    }
-    if (shouldPassPageListener) {
-      this.pageListener = null;
-      return pageListener;
-    }
     this.uninit();
     return null;
   },
@@ -252,9 +143,7 @@ const AboutNewTab = {
   },
 
   getTopSites() {
-    return this.activityStream
-      ? this.activityStream.store.getState().TopSites.rows
-      : [];
+    return [];
   },
 
   _alreadyRecordedTopsitesPainted: false,
