diff --git a/browser/actors/ContextMenuParent.sys.mjs b/browser/actors/ContextMenuParent.sys.mjs
--- a/browser/actors/ContextMenuParent.sys.mjs
+++ b/browser/actors/ContextMenuParent.sys.mjs
@@ -19,8 +19,7 @@ export class ContextMenuParent extends J
     // since that'll likely be the "top" <xul:browser>, and then use its window's
     // nsContextMenu instance instead.
     if (!win.openContextMenu) {
-      let topBrowser = browser.ownerGlobal.docShell.chromeEventHandler;
-      win = topBrowser.ownerGlobal;
+      return;
     }
 
     message.data.context.showRelay &&= lazy.FirefoxRelay.isEnabled;
diff --git a/browser/actors/FormValidationParent.sys.mjs b/browser/actors/FormValidationParent.sys.mjs
--- a/browser/actors/FormValidationParent.sys.mjs
+++ b/browser/actors/FormValidationParent.sys.mjs
@@ -84,11 +84,11 @@ export class FormValidationParent extend
         let browser = this.browsingContext.top.embedderElement;
         let window = browser.ownerGlobal;
         let data = aMessage.data;
-        let tabBrowser = window.gBrowser;
+        let selectedBrowser = window.getSelectedBrowser();
 
         // target is the <browser>, make sure we're receiving a message
         // from the foreground tab.
-        if (tabBrowser && browser != tabBrowser.selectedBrowser) {
+        if (browser != selectedBrowser) {
           return;
         }
 
@@ -124,10 +124,10 @@ export class FormValidationParent extend
   _onPopupHidden(aEvent) {
     aEvent.originalTarget.removeEventListener("popuphidden", this, true);
     Services.obs.removeObserver(this._obs, "popup-shown");
-    let tabBrowser = aEvent.originalTarget.ownerGlobal.gBrowser;
-    tabBrowser.selectedBrowser.removeEventListener("scroll", this, true);
-    tabBrowser.selectedBrowser.removeEventListener("FullZoomChange", this);
-    tabBrowser.selectedBrowser.removeEventListener("TextZoomChange", this);
+    let selectedBrowser = aEvent.originalTarget.ownerGlobal.getSelectedBrowser();
+    selectedBrowser.removeEventListener("scroll", this, true);
+    selectedBrowser.removeEventListener("FullZoomChange", this);
+    selectedBrowser.removeEventListener("TextZoomChange", this);
 
     this._obs = null;
     this._panel = null;
diff --git a/browser/amethyst/content/browser.css b/browser/amethyst/content/browser.css
new file mode 100644
--- /dev/null
+++ b/browser/amethyst/content/browser.css
@@ -0,0 +1,34 @@
+@namespace html url("http://www.w3.org/1999/xhtml");
+
+:root,
+body {
+  margin: 0;
+  padding: 0;
+  height: 100%;
+  width: 100%;
+  overflow: clip;
+}
+
+.browserStack {
+  flex: 10000 10000;
+  /* Prevent shrinking the page content to 0 height and width */
+  min-height: 25px;
+  min-width: 25px;
+}
+
+body {
+  display: flex;
+  flex-direction: column;
+  flex: 1;
+}
+
+#invalid-form-popup > description {
+  max-width: 280px;
+}
+
+.popup-anchor {
+  /* should occupy space but not be visible */
+  opacity: 0;
+  pointer-events: none;
+  position: absolute;
+}
diff --git a/browser/amethyst/content/browser.js b/browser/amethyst/content/browser.js
new file mode 100644
--- /dev/null
+++ b/browser/amethyst/content/browser.js
@@ -0,0 +1,138 @@
+const { Preferences } = ChromeUtils.import("resource://gre/modules/Preferences.jsm");
+const Environment = Cc["@mozilla.org/process/environment;1"].getService(Ci.nsIEnvironment);
+
+// for about:preferences
+const { XPCOMUtils } = ChromeUtils.import("resource://gre/modules/XPCOMUtils.jsm");
+XPCOMUtils.defineLazyModuleGetters(this, { ZoomUI: "resource:///modules/ZoomUI.jsm" });
+XPCOMUtils.defineLazyScriptGetter(this, "ZoomManager", "chrome://global/content/viewZoomOverlay.js");
+
+function onDOMContentLoaded() {
+  ZoomUI.init(window);
+
+  let uriToLoad = "";
+  if (window.arguments && window.arguments.length) {
+    let args = window.arguments[0];
+    if (args instanceof Ci.nsIArray && args.length) {
+      for (let i = 0; i < args.length; i++) {
+        uriToLoad = args.queryElementAt(i, Ci.nsISupportsString).data;
+        if (!invalidStartupHomepage(uriToLoad)) break;
+      }
+    }
+  }
+  if (invalidStartupHomepage(uriToLoad)) {
+    uriToLoad = Cc["@mozilla.org/browser/clh;1"].getService(Ci.nsIBrowserHandler).defaultArgs;
+  }
+  if (invalidStartupHomepage(uriToLoad)) {
+    uriToLoad = Preferences.get("browser.startup.homepage");
+  }
+
+  if (uriToLoad.indexOf('about:') == 0) {
+    document.getElementById("content").remove();
+    var element = document.getElementById("aboutContent");
+    element.id = "content";
+  } else {
+    document.getElementById("aboutContent").remove();
+  }
+
+  getSelectedBrowser().src = uriToLoad;
+}
+
+function invalidStartupHomepage(uriToLoad) {
+  return !uriToLoad || uriToLoad === "about:home" || uriToLoad === "about:newtab";
+}
+
+function getSelectedBrowser() {
+  return document.getElementById("content");
+}
+
+function onMozAfterPaint() {
+  window.fullScreen = true;
+}
+
+function openTrustedLinkIn(url, where, aParams) {
+  getSelectedBrowser().src = url;
+}
+
+function openWebLinkIn(url, where, params) {
+  getSelectedBrowser().src = url;
+}
+
+
+/**
+ * Keyboard shortcut
+ */
+function allowed(envName, prefName) {
+  return Environment.get(envName) || Preferences.get(prefName);
+}
+
+function BrowserHome() {
+  if (allowed("WEBVIEWER_ENABLE_HOMEPAGE", "webviewer.homepage.enable")) {
+    getSelectedBrowser().src = Preferences.get("browser.startup.homepage");
+  }
+}
+
+function BrowserBack() {
+  if (allowed("WEBVIEWER_ENABLE_BACK", "webviewer.back.enable")) {
+    getSelectedBrowser().goBack();
+  }
+}
+
+function BrowserForward() {
+  if (allowed("WEBVIEWER_ENABLE_FORWARD", "webviewer.forward.enable")) {
+    getSelectedBrowser().goForward();
+  }
+}
+
+function BrowserReload() {
+  if (allowed("WEBVIEWER_ENABLE_RELOAD", "webviewer.reload.enable")) {
+    getSelectedBrowser().reload();
+  }
+}
+
+const kSkipCacheFlags =
+  Ci.nsIWebNavigation.LOAD_FLAGS_BYPASS_PROXY |
+  Ci.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE;
+
+function BrowserReloadSkipCache() {
+  if (allowed("WEBVIEWER_ENABLE_RELOAD", "webviewer.reload.enable")) {
+    getSelectedBrowser().reloadWithFlags(kSkipCacheFlags);
+  }
+}
+
+const ZOOM_PREF = "devtools.toolbox.zoomValue";
+const MIN_ZOOM = 0.5;
+const MAX_ZOOM = 2;
+
+function BrowserZoomIn() {
+  if (allowed("WEBVIEWER_ENABLE_ZOOM", "webviewer.zoom.enable") && MAX_ZOOM > getSelectedBrowser().fullZoom) {
+    getSelectedBrowser().fullZoom += 0.1;
+  }
+}
+
+function BrowserZoomOut() {
+  if (allowed("WEBVIEWER_ENABLE_ZOOM", "webviewer.zoom.enable") && MIN_ZOOM < getSelectedBrowser().fullZoom) {
+    getSelectedBrowser().fullZoom -= 0.1;
+  }
+}
+
+function BrowserZoomReset() {
+  if (allowed("WEBVIEWER_ENABLE_ZOOM", "webviewer.zoom.enable")) {
+    getSelectedBrowser().fullZoom = parseFloat(Services.prefs.getCharPref(ZOOM_PREF));
+  }
+}
+
+function BrowserLoadURI(uriToLoad) {
+  if (allowed("WEBVIEWER_ENABLE_ABOUT", "webviewer.about.enable")) {
+    getSelectedBrowser().src = uriToLoad;
+  }
+}
+
+function BrowserQuit() {
+  if (allowed("WEBVIEWER_ENABLE_QUIT", "webviewer.quit.enable")) {
+    window.close();
+  }
+}
+
+function BrowserFullScreen() {
+  window.fullScreen = !window.fullScreen;
+}
diff --git a/browser/amethyst/content/browser.xhtml b/browser/amethyst/content/browser.xhtml
new file mode 100644
--- /dev/null
+++ b/browser/amethyst/content/browser.xhtml
@@ -0,0 +1,80 @@
+<?xml version="1.0"?>
+<?xml-stylesheet href="chrome://global/skin/global.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/content/browser.css" type="text/css"?>
+
+<html id="main-window"
+        xmlns:html="http://www.w3.org/1999/xhtml"
+        xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        xmlns="http://www.w3.org/1999/xhtml"
+        data-l10n-id="browser-main-window-window-titles"
+        data-l10n-args="{&quot;content-title&quot;:&quot;CONTENTTITLE&quot;}"
+        data-l10n-attrs="data-content-title-default, data-content-title-private, data-title-default, data-title-private"
+        windowtype="navigator:browser"
+        width="800"
+        height="480"
+        sizemode="maximized"
+        persist="width height sizemode"
+        data-l10n-sync="true">
+<head>
+  <link rel="localization" href="branding/brand.ftl"/>
+  <link rel="localization" href="browser/browser.ftl"/>
+  <title data-l10n-id="browser-main-window-title"></title>
+
+  <script type="text/javascript">
+    Services.scriptloader.loadSubScript("chrome://browser/content/browser.js", this);
+    window.addEventListener("DOMContentLoaded", onDOMContentLoaded, { once: true });
+    window.addEventListener("MozAfterPaint", onMozAfterPaint, { once: true });
+  </script>
+</head>
+<html:body xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+<commandset id="mainCommandSet">
+  <command id="Browser:Home"            oncommand="BrowserHome();"/>
+  <command id="Browser:Back"            oncommand="BrowserBack();"/>
+  <command id="Browser:Forward"         oncommand="BrowserForward();"/>
+  <command id="Browser:Reload"          oncommand="BrowserReload();"/>
+  <command id="Browser:ReloadSkipCache" oncommand="BrowserReloadSkipCache();"/>
+  <command id="Browser:ZoomIn"          oncommand="BrowserZoomIn();"/>
+  <command id="Browser:ZoomOut"         oncommand="BrowserZoomOut();"/>
+  <command id="Browser:ZoomReset"       oncommand="BrowserZoomReset();"/>
+  <command id="Browser:About:Pref"      oncommand="BrowserLoadURI('about:preferences');"/>
+  <command id="Browser:About:About"     oncommand="BrowserLoadURI('about:about');"/>
+  <command id="Browser:About:Config"    oncommand="BrowserLoadURI('about:config');"/>
+  <command id="Browser:Quit"            oncommand="BrowserQuit();"/>
+  <command id="View:FullScreen"         oncommand="BrowserFullScreen();"/>
+</commandset>
+<keyset id="mainKeyset">
+  <key keycode="VK_HOME"  command="Browser:Home"            modifiers="accel"/>
+  <key keycode="VK_BACK"  command="Browser:Back"/>
+  <key keycode="VK_LEFT"  command="Browser:Back"            modifiers="alt"/>
+  <key key="["            command="Browser:Back"            modifiers="accel"/>
+  <key keycode="VK_RIGHT" command="Browser:Forward"         modifiers="alt"/>
+  <key key="]"            command="Browser:Forward"         modifiers="accel"/>
+  <key keycode="VK_F5"    command="Browser:Reload"/>
+  <key key="R"            command="Browser:Reload"          modifiers="accel"/>
+  <key keycode="VK_F5"    command="Browser:ReloadSkipCache" modifiers="accel"/>
+  <key key="R"            command="Browser:ReloadSkipCache" modifiers="accel shift"/>
+  <key key="+"            command="Browser:ZoomIn"          modifiers="accel"/>
+  <key key="-"            command="Browser:ZoomOut"         modifiers="accel"/>
+  <key key="0"            command="Browser:ZoomReset"       modifiers="accel"/>
+  <key key=","            command="Browser:About:Pref"      modifiers="accel"/>
+  <key key="."            command="Browser:About:About"     modifiers="accel"/>
+  <key key="/"            command="Browser:About:Config"    modifiers="accel"/>
+  <key key="Q"            command="Browser:Quit"            modifiers="accel"/>
+  <key keycode="VK_F11"   command="View:FullScreen"/>
+</keyset>
+
+<popupset id="mainPopupSet">
+  <html:template id="invalidFormTemplate">
+    <!-- for invalid form error message -->
+    <panel id="invalid-form-popup" type="arrow" orient="vertical" noautofocus="true" level="parent" locationspecific="true">
+      <description/>
+    </panel>
+  </html:template>
+</popupset>
+
+<stack class="browserStack">
+  <browser id="content"      contextmenu="contentAreaContextMenu" message="true" messagemanagergroup="browsers" tooltip="aHTMLTooltip" type="content" maychangeremoteness="true" initiallyactive="true" remote="true" autocompletepopup="PopupAutoComplete" nodefaultsrc="true"/>
+  <browser id="aboutContent" contextmenu="contentAreaContextMenu" message="true" messagemanagergroup="browsers" tooltip="aHTMLTooltip" type="content" maychangeremoteness="true" initiallyactive="true" remote="false" autocompletepopup="PopupAutoComplete" nodefaultsrc="true"/>
+</stack>
+</html:body>
+</html>
diff --git a/browser/amethyst/jar.mn b/browser/amethyst/jar.mn
new file mode 100644
--- /dev/null
+++ b/browser/amethyst/jar.mn
@@ -0,0 +1,5 @@
+browser.jar:
+%  content browser %content/browser/ contentaccessible=yes
+        content/browser/browser.css                   (content/browser.css)
+        content/browser/browser.js                    (content/browser.js)
+        content/browser/browser.xhtml                 (content/browser.xhtml)
diff --git a/browser/amethyst/moz.build b/browser/amethyst/moz.build
new file mode 100644
--- /dev/null
+++ b/browser/amethyst/moz.build
@@ -0,0 +1,1 @@
+JAR_MANIFESTS += ['jar.mn']
diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -19,6 +19,15 @@
   #endif
 #endif
 
+// WebViewer pref
+pref("webviewer.homepage.enable", false);
+pref("webviewer.back.enable",     false);
+pref("webviewer.forward.enable",  false);
+pref("webviewer.reload.enable",   false);
+pref("webviewer.zoom.enable",     false);
+pref("webviewer.about.enable",    false);
+pref("webviewer.quit.enable",     false);
+
 pref("browser.hiddenWindowChromeURL", "chrome://browser/content/hiddenWindowMac.xhtml");
 
 // Enables some extra Extension System Logging (can reduce performance)
@@ -289,7 +298,7 @@ pref("browser.shell.defaultBrowserAgent.
 // 0 = blank, 1 = home (browser.startup.homepage), 2 = last visited page, 3 = resume previous browser session
 // The behavior of option 3 is detailed at: http://wiki.mozilla.org/Session_Restore
 pref("browser.startup.page",                1);
-pref("browser.startup.homepage",            "about:home");
+pref("browser.startup.homepage",            "https://r.gecko-embedded.org/amethyst");
 pref("browser.startup.homepage.abouthome_cache.enabled", true);
 pref("browser.startup.homepage.abouthome_cache.loglevel", "Warn");
 
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -32,9 +32,6 @@ browser.jar:
         content/browser/aboutTabCrashed.js            (content/aboutTabCrashed.js)
         content/browser/aboutTabCrashed.xhtml         (content/aboutTabCrashed.xhtml)
         content/browser/blanktab.html                 (content/blanktab.html)
-        content/browser/browser.css                   (content/browser.css)
-        content/browser/browser.js                    (content/browser.js)
-*       content/browser/browser.xhtml                 (content/browser.xhtml)
         content/browser/browser-a11yUtils.js          (content/browser-a11yUtils.js)
         content/browser/browser-addons.js             (content/browser-addons.js)
         content/browser/browser-allTabsMenu.js        (content/browser-allTabsMenu.js)
diff --git a/browser/components/extensions/ext-browser.json b/browser/components/extensions/ext-browser.json
--- a/browser/components/extensions/ext-browser.json
+++ b/browser/components/extensions/ext-browser.json
@@ -89,14 +89,6 @@
     "schema": "chrome://browser/content/schemas/menus_child.json",
     "scopes": ["addon_child", "content_child", "devtools_child"]
   },
-  "menusInternal": {
-    "url": "chrome://browser/content/parent/ext-menus.js",
-    "schema": "chrome://browser/content/schemas/menus.json",
-    "scopes": ["addon_parent"],
-    "events": ["startup"],
-    "permissions": ["menus", "contextMenus"],
-    "paths": [["contextMenus"], ["menus"], ["menusInternal"]]
-  },
   "normandyAddonStudy": {
     "url": "chrome://browser/content/parent/ext-normandyAddonStudy.js",
     "schema": "chrome://browser/content/schemas/normandyAddonStudy.json",
diff --git a/browser/components/preferences/home.js b/browser/components/preferences/home.js
--- a/browser/components/preferences/home.js
+++ b/browser/components/preferences/home.js
@@ -358,20 +358,6 @@ var gHomePane = {
    */
   _getTabsForHomePage() {
     let tabs = [];
-    let win = Services.wm.getMostRecentWindow("navigator:browser");
-
-    // We should only include visible & non-pinned tabs
-    if (
-      win &&
-      win.document.documentElement.getAttribute("windowtype") ===
-        "navigator:browser"
-    ) {
-      tabs = win.gBrowser.visibleTabs.slice(win.gBrowser._numPinnedTabs);
-      tabs = tabs.filter(tab => !this._isTabAboutPreferences(tab));
-      // XXX: Bug 1441637 - Fix tabbrowser to report tab.closing before it blurs it
-      tabs = tabs.filter(tab => !tab.closing);
-    }
-
     return tabs;
   },
 
diff --git a/browser/components/preferences/main.js b/browser/components/preferences/main.js
--- a/browser/components/preferences/main.js
+++ b/browser/components/preferences/main.js
@@ -273,7 +273,7 @@ var gMainPane = {
       ];
 
       let pollForDefaultBrowser = () => {
-        let uri = win.gBrowser.currentURI.spec;
+        let uri = win.getSelectedBrowser().currentURI.spec;
 
         if (
           (uri == "about:preferences" || uri == "about:preferences#general") &&
diff --git a/browser/moz.build b/browser/moz.build
--- a/browser/moz.build
+++ b/browser/moz.build
@@ -13,6 +13,7 @@ EXTRA_COMPONENTS += [
 ]
 
 DIRS += [
+    "amethyst",
     "actors",
     "base",
     "components",
diff --git a/services/settings/Database.sys.mjs b/services/settings/Database.sys.mjs
--- a/services/settings/Database.sys.mjs
+++ b/services/settings/Database.sys.mjs
@@ -596,7 +596,7 @@ function ensureShutdownBlocker() {
     return;
   }
   gShutdownBlocker = true;
-  lazy.AsyncShutdown.profileBeforeChange.addBlocker(
+  lazy.AsyncShutdown.profileBeforeChange?.addBlocker(
     "RemoteSettingsClient - finish IDB access.",
     Database._shutdownHandler,
     {
diff --git a/toolkit/components/windowwatcher/nsWindowWatcher.cpp b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
--- a/toolkit/components/windowwatcher/nsWindowWatcher.cpp
+++ b/toolkit/components/windowwatcher/nsWindowWatcher.cpp
@@ -643,7 +643,7 @@ nsresult nsWindowWatcher::OpenWindowInte
   }
 
   if (parentOuterWin) {
-    parentTreeOwner = parentOuterWin->GetTreeOwner();
+    return NS_ERROR_ABORT;
   }
 
   // We expect BrowserParent to have provided us the absolute URI of the window
