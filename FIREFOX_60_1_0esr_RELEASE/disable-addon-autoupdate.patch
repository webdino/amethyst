diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -30,7 +30,6 @@ const PREF_EM_AUTOUPDATE_DEFAULT      = 
 const PREF_EM_STRICT_COMPATIBILITY    = "extensions.strictCompatibility";
 const PREF_EM_CHECK_UPDATE_SECURITY   = "extensions.checkUpdateSecurity";
 const PREF_APP_UPDATE_ENABLED         = "app.update.enabled";
-const PREF_APP_UPDATE_AUTO            = "app.update.auto";
 const UNKNOWN_XPCOM_ABI               = "unknownABI";
 
 const PREF_MIN_WEBEXT_PLATFORM_VERSION = "extensions.webExtensionsMinPlatformVersion";
@@ -1327,14 +1326,7 @@ var AddonManagerInternal = {
 
   // Returns true if System Addons should be updated
   systemUpdateEnabled() {
-    if (!Services.prefs.getBoolPref(PREF_APP_UPDATE_ENABLED) ||
-        !Services.prefs.getBoolPref(PREF_APP_UPDATE_AUTO)) {
       return false;
-    }
-    if (Services.policies && !Services.policies.isAllowed("SysAddonUpdate")) {
-      return false;
-    }
-    return true;
   },
 
   /**
@@ -2605,7 +2597,7 @@ var AddonManagerInternal = {
   },
 
   get autoUpdateDefault() {
-    return gAutoUpdateDefault;
+    return false;
   },
 
   set autoUpdateDefault(aValue) {
@@ -2661,7 +2653,7 @@ var AddonManagerInternal = {
   },
 
   get updateEnabled() {
-    return gUpdateEnabled;
+    return false;
   },
 
   set updateEnabled(aValue) {
@@ -3610,17 +3602,7 @@ var AddonManager = {
    * @return true if the addon should auto-update, false otherwise.
    */
   shouldAutoUpdate(aAddon) {
-    if (!aAddon || typeof aAddon != "object")
-      throw Components.Exception("aAddon must be specified",
-                                 Cr.NS_ERROR_INVALID_ARG);
-
-    if (!("applyBackgroundUpdates" in aAddon))
       return false;
-    if (aAddon.applyBackgroundUpdates == AddonManager.AUTOUPDATE_ENABLE)
-      return true;
-    if (aAddon.applyBackgroundUpdates == AddonManager.AUTOUPDATE_DISABLE)
-      return false;
-    return this.autoUpdateDefault;
   },
 
   get checkCompatibility() {
diff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js
--- a/toolkit/mozapps/extensions/content/extensions.js
+++ b/toolkit/mozapps/extensions/content/extensions.js
@@ -2106,21 +2106,9 @@ var gDiscoverView = {
     url = Services.urlFormatter.formatURL(url);
 
     let setURL = (aURL) => {
-      try {
-        this.homepageURL = Services.io.newURI(aURL);
-      } catch (e) {
         this.showError();
         notifyInitialized();
         return;
-      }
-
-      this._browser.homePage = this.homepageURL.spec;
-      this._browser.addProgressListener(this);
-
-      if (this.loaded)
-        this._loadURL(this.homepageURL.spec, false, notifyInitialized);
-      else
-        notifyInitialized();
     };
 
     if (!Services.prefs.getBoolPref(PREF_GETADDONS_CACHE_ENABLED)) {
diff --git a/toolkit/mozapps/extensions/internal/AddonRepository.jsm b/toolkit/mozapps/extensions/internal/AddonRepository.jsm
--- a/toolkit/mozapps/extensions/internal/AddonRepository.jsm
+++ b/toolkit/mozapps/extensions/internal/AddonRepository.jsm
@@ -20,7 +20,6 @@ XPCOMUtils.defineLazyModuleGetters(this,
 
 var EXPORTED_SYMBOLS = [ "AddonRepository" ];
 
-const PREF_GETADDONS_CACHE_ENABLED       = "extensions.getAddons.cache.enabled";
 const PREF_GETADDONS_CACHE_TYPES         = "extensions.getAddons.cache.types";
 const PREF_GETADDONS_CACHE_ID_ENABLED    = "extensions.%ID%.getAddons.cache.enabled";
 const PREF_GETADDONS_BROWSEADDONS        = "extensions.getAddons.browseAddons";
@@ -311,7 +310,7 @@ var AddonRepository = {
    * Whether caching is currently enabled
    */
   get cacheEnabled() {
-    return Services.prefs.getBoolPref(PREF_GETADDONS_CACHE_ENABLED, false);
+    return false;
   },
 
   /**
@@ -427,47 +426,7 @@ var AddonRepository = {
    */
   _fetchPaged(ids, pref, handler) {
     let startURL = this._formatURLPref(pref, {IDS: ids.join(",")});
-    let results = [];
-
-    const fetchNextPage = (url) => {
-      return new Promise((resolve, reject) => {
-        let request = new ServiceRequest();
-        request.mozBackgroundRequest = true;
-        request.open("GET", url, true);
-        request.responseType = "json";
-
-        request.addEventListener("error", aEvent => {
-          reject(new Error(`GET ${url} failed`));
-        });
-        request.addEventListener("timeout", aEvent => {
-          reject(new Error(`GET ${url} timed out`));
-        });
-        request.addEventListener("load", aEvent => {
-          let response = request.response;
-          if (!response || (request.status != 200 && request.status != 0)) {
-            reject(new Error(`GET ${url} failed (status ${request.status})`));
-            return;
-          }
-
-          try {
-            let newResults = handler(response.results).filter(e => ids.includes(e.id));
-            results.push(...newResults);
-          } catch (err) {
-            reject(err);
-          }
-
-          if (response.next) {
-            resolve(fetchNextPage(response.next));
-          }
-
-          resolve(results);
-        });
-
-        request.send(null);
-      });
-    };
-
-    return fetchNextPage(startURL);
+    return Promise.reject(new Error(`GET ${startURL} failed`));
   },
 
   /**
diff --git a/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm b/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
--- a/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
+++ b/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
@@ -560,25 +560,17 @@ function UpdateParser(aId, aUpdateKey, a
   this.observer = aObserver;
   this.url = aUrl;
 
-  let requireBuiltIn = Services.prefs.getBoolPref(PREF_UPDATE_REQUIREBUILTINCERTS, true);
+  this.request = null;
+  this._doneAt = new Error("place holder");
 
-  logger.debug("Requesting " + aUrl);
-  try {
-    this.request = new ServiceRequest();
-    this.request.open("GET", this.url, true);
-    this.request.channel.notificationCallbacks = new CertUtils.BadCertHandler(!requireBuiltIn);
-    this.request.channel.loadFlags |= Ci.nsIRequest.LOAD_BYPASS_CACHE;
-    // Prevent the request from writing to cache.
-    this.request.channel.loadFlags |= Ci.nsIRequest.INHIBIT_CACHING;
-    this.request.overrideMimeType("text/plain");
-    this.request.setRequestHeader("Moz-XPI-Update", "1", true);
-    this.request.timeout = TIMEOUT;
-    this.request.addEventListener("load", () => this.onLoad());
-    this.request.addEventListener("error", () => this.onError());
-    this.request.addEventListener("timeout", () => this.onTimeout());
-    this.request.send(null);
-  } catch (e) {
-    logger.error("Failed to request update manifest", e);
+  if ("onUpdateCheckComplete" in this.observer) {
+    try {
+      this.observer.onUpdateCheckComplete([]);
+    } catch (e) {
+      logger.warn("onUpdateCheckComplete notification failed", e);
+    }
+  } else {
+    logger.warn("onUpdateCheckComplete may not properly cancel", new Error("stack marker"));
   }
 }
 
diff --git a/toolkit/mozapps/extensions/nsBlocklistService.js b/toolkit/mozapps/extensions/nsBlocklistService.js
--- a/toolkit/mozapps/extensions/nsBlocklistService.js
+++ b/toolkit/mozapps/extensions/nsBlocklistService.js
@@ -66,7 +66,7 @@ const VULNERABILITYSTATUS_NO_UPDATE     
 const EXTENSION_BLOCK_FILTERS = ["id", "name", "creator", "homepageURL", "updateURL"];
 
 var gLoggingEnabled = null;
-var gBlocklistEnabled = true;
+var gBlocklistEnabled = false;
 var gBlocklistLevel = DEFAULT_LEVEL;
 
 // From appinfo in Services.jsm. It is not possible to use the one in
@@ -222,7 +222,6 @@ function parseRegExp(aStr) {
 function Blocklist() {
   Services.obs.addObserver(this, "xpcom-shutdown");
   gLoggingEnabled = Services.prefs.getBoolPref(PREF_EM_LOGGING_ENABLED, false);
-  gBlocklistEnabled = Services.prefs.getBoolPref(PREF_BLOCKLIST_ENABLED, true);
   gBlocklistLevel = Math.min(Services.prefs.getIntPref(PREF_BLOCKLIST_LEVEL, DEFAULT_LEVEL),
                              MAX_BLOCK_LEVEL);
   Services.prefs.addObserver("extensions.blocklist.", this);
@@ -272,11 +271,6 @@ Blocklist.prototype = {
         case PREF_EM_LOGGING_ENABLED:
           gLoggingEnabled = Services.prefs.getBoolPref(PREF_EM_LOGGING_ENABLED, false);
           break;
-        case PREF_BLOCKLIST_ENABLED:
-          gBlocklistEnabled = Services.prefs.getBoolPref(PREF_BLOCKLIST_ENABLED, true);
-          this._loadBlocklist();
-          this._blocklistUpdated(null, null);
-          break;
         case PREF_BLOCKLIST_LEVEL:
           gBlocklistLevel = Math.min(Services.prefs.getIntPref(PREF_BLOCKLIST_LEVEL, DEFAULT_LEVEL),
                                      MAX_BLOCK_LEVEL);
@@ -450,130 +444,7 @@ Blocklist.prototype = {
   },
 
   notify(aTimer) {
-    if (!gBlocklistEnabled)
       return;
-
-    try {
-      var dsURI = Services.prefs.getCharPref(PREF_BLOCKLIST_URL);
-    } catch (e) {
-      LOG("Blocklist::notify: The " + PREF_BLOCKLIST_URL + " preference" +
-          " is missing!");
-      return;
-    }
-
-    var pingCountVersion = Services.prefs.getIntPref(PREF_BLOCKLIST_PINGCOUNTVERSION, 0);
-    var pingCountTotal = Services.prefs.getIntPref(PREF_BLOCKLIST_PINGCOUNTTOTAL, 1);
-    var daysSinceLastPing = 0;
-    if (pingCountVersion == 0) {
-      daysSinceLastPing = "new";
-    } else {
-      // Seconds in one day is used because nsIUpdateTimerManager stores the
-      // last update time in seconds.
-      let secondsInDay = 60 * 60 * 24;
-      let lastUpdateTime = Services.prefs.getIntPref(PREF_BLOCKLIST_LASTUPDATETIME, 0);
-      if (lastUpdateTime == 0) {
-        daysSinceLastPing = "invalid";
-      } else {
-        let now = Math.round(Date.now() / 1000);
-        daysSinceLastPing = Math.floor((now - lastUpdateTime) / secondsInDay);
-      }
-
-      if (daysSinceLastPing == 0 || daysSinceLastPing == "invalid") {
-        pingCountVersion = pingCountTotal = "invalid";
-      }
-    }
-
-    if (pingCountVersion < 1)
-      pingCountVersion = 1;
-    if (pingCountTotal < 1)
-      pingCountTotal = 1;
-
-    dsURI = dsURI.replace(/%APP_ID%/g, gApp.ID);
-    // Not all applications implement nsIXULAppInfo (e.g. xpcshell doesn't).
-    if (gApp.version)
-      dsURI = dsURI.replace(/%APP_VERSION%/g, gApp.version);
-    dsURI = dsURI.replace(/%PRODUCT%/g, gApp.name);
-    // Not all applications implement nsIXULAppInfo (e.g. xpcshell doesn't).
-    if (gApp.version)
-      dsURI = dsURI.replace(/%VERSION%/g, gApp.version);
-    dsURI = dsURI.replace(/%BUILD_ID%/g, gApp.appBuildID);
-    dsURI = dsURI.replace(/%BUILD_TARGET%/g, gApp.OS + "_" + gABI);
-    dsURI = dsURI.replace(/%OS_VERSION%/g, gOSVersion);
-    dsURI = dsURI.replace(/%LOCALE%/g, getLocale());
-    dsURI = dsURI.replace(/%CHANNEL%/g, UpdateUtils.UpdateChannel);
-    dsURI = dsURI.replace(/%PLATFORM_VERSION%/g, gApp.platformVersion);
-    dsURI = dsURI.replace(/%DISTRIBUTION%/g,
-                      getDistributionPrefValue(PREF_APP_DISTRIBUTION));
-    dsURI = dsURI.replace(/%DISTRIBUTION_VERSION%/g,
-                      getDistributionPrefValue(PREF_APP_DISTRIBUTION_VERSION));
-    dsURI = dsURI.replace(/%PING_COUNT%/g, pingCountVersion);
-    dsURI = dsURI.replace(/%TOTAL_PING_COUNT%/g, pingCountTotal);
-    dsURI = dsURI.replace(/%DAYS_SINCE_LAST_PING%/g, daysSinceLastPing);
-    dsURI = dsURI.replace(/\+/g, "%2B");
-
-    // Under normal operations it will take around 5,883,516 years before the
-    // preferences used to store pingCountVersion and pingCountTotal will rollover
-    // so this code doesn't bother trying to do the "right thing" here.
-    if (pingCountVersion != "invalid") {
-      pingCountVersion++;
-      if (pingCountVersion > 2147483647) {
-        // Rollover to -1 if the value is greater than what is support by an
-        // integer preference. The -1 indicates that the counter has been reset.
-        pingCountVersion = -1;
-      }
-      Services.prefs.setIntPref(PREF_BLOCKLIST_PINGCOUNTVERSION, pingCountVersion);
-    }
-
-    if (pingCountTotal != "invalid") {
-      pingCountTotal++;
-      if (pingCountTotal > 2147483647) {
-        // Rollover to 1 if the value is greater than what is support by an
-        // integer preference.
-        pingCountTotal = -1;
-      }
-      Services.prefs.setIntPref(PREF_BLOCKLIST_PINGCOUNTTOTAL, pingCountTotal);
-    }
-
-    // Verify that the URI is valid
-    try {
-      var uri = Services.io.newURI(dsURI);
-    } catch (e) {
-      LOG("Blocklist::notify: There was an error creating the blocklist URI\r\n" +
-          "for: " + dsURI + ", error: " + e);
-      return;
-    }
-
-    LOG("Blocklist::notify: Requesting " + uri.spec);
-    let request = new ServiceRequest();
-    request.open("GET", uri.spec, true);
-    request.channel.notificationCallbacks = new gCertUtils.BadCertHandler();
-    request.overrideMimeType("text/xml");
-
-    // The server will return a `304 Not Modified` response if the blocklist was
-    // not changed since last check.
-    const lastModified = Services.prefs.getCharPref(PREF_BLOCKLIST_LAST_MODIFIED, "");
-    if (lastModified) {
-      request.setRequestHeader("If-Modified-Since", lastModified);
-    } else {
-      request.setRequestHeader("Cache-Control", "no-cache");
-    }
-
-    request.addEventListener("error", event => this.onXMLError(event));
-    request.addEventListener("load", event => this.onXMLLoad(event));
-    request.send(null);
-
-    // When the blocklist loads we need to compare it to the current copy so
-    // make sure we have loaded it.
-    if (!this.isLoaded)
-      this._loadBlocklist();
-
-    // If blocklist update via Kinto is enabled, poll for changes and sync.
-    // Currently certificates blocklist relies on it by default.
-    if (Services.prefs.getBoolPref(PREF_BLOCKLIST_UPDATE_ENABLED)) {
-      BlocklistUpdater.checkVersions().catch(() => {
-        // Bug 1254099 - Telemetry (success or errors) will be collected during this process.
-      });
-    }
   },
 
   async onXMLLoad(aEvent) {
