diff --git a/netwerk/base/nsIOService.cpp b/netwerk/base/nsIOService.cpp
--- a/netwerk/base/nsIOService.cpp
+++ b/netwerk/base/nsIOService.cpp
@@ -48,7 +48,6 @@
 #include "mozilla/dom/ClientInfo.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/ServiceWorkerDescriptor.h"
-#include "mozilla/net/CaptivePortalService.h"
 #include "mozilla/net/NetworkConnectivityService.h"
 #include "mozilla/net/SocketProcessHost.h"
 #include "mozilla/net/SocketProcessParent.h"
@@ -90,7 +89,6 @@ using mozilla::dom::ServiceWorkerDescrip
 
 nsIOService* gIOService;
 static bool gHasWarnedUploadChannel2;
-static bool gCaptivePortalEnabled = false;
 static LazyLogModule gIOServiceLog("nsIOService");
 #undef LOG
 #define LOG(args) MOZ_LOG(gIOServiceLog, LogLevel::Debug, args)
@@ -339,12 +337,6 @@ nsresult nsIOService::InitializeCaptiveP
     return NS_OK;
   }
 
-  mCaptivePortalService = do_GetService(NS_CAPTIVEPORTAL_CID);
-  if (mCaptivePortalService) {
-    return static_cast<CaptivePortalService*>(mCaptivePortalService.get())
-        ->Initialize();
-  }
-
   // Instantiate and initialize the service
   RefPtr<NetworkConnectivityService> ncs =
       NetworkConnectivityService::GetSingleton();
@@ -628,48 +620,10 @@ NS_IMPL_ISUPPORTS(nsIOService, nsIIOServ
 
 nsresult nsIOService::RecheckCaptivePortal() {
   MOZ_ASSERT(NS_IsMainThread(), "Must be called on the main thread");
-  if (!mCaptivePortalService) {
-    return NS_OK;
-  }
-  nsCOMPtr<nsIRunnable> task = NewRunnableMethod(
-      "nsIOService::RecheckCaptivePortal", mCaptivePortalService,
-      &nsICaptivePortalService::RecheckCaptivePortal);
-  return NS_DispatchToMainThread(task);
+  return NS_OK;
 }
 
 nsresult nsIOService::RecheckCaptivePortalIfLocalRedirect(nsIChannel* newChan) {
-  nsresult rv;
-
-  if (!mCaptivePortalService) {
-    return NS_OK;
-  }
-
-  nsCOMPtr<nsIURI> uri;
-  rv = newChan->GetURI(getter_AddRefs(uri));
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  nsCString host;
-  rv = uri->GetHost(host);
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  PRNetAddr prAddr;
-  if (PR_StringToNetAddr(host.BeginReading(), &prAddr) != PR_SUCCESS) {
-    // The redirect wasn't to an IP literal, so there's probably no need
-    // to trigger the captive portal detection right now. It can wait.
-    return NS_OK;
-  }
-
-  NetAddr netAddr;
-  PRNetAddrToNetAddr(&prAddr, &netAddr);
-  if (IsIPAddrLocal(&netAddr)) {
-    // Redirects to local IP addresses are probably captive portals
-    RecheckCaptivePortal();
-  }
-
   return NS_OK;
 }
 
@@ -1274,15 +1228,6 @@ nsresult nsIOService::SetConnectivityInt
   // we have statistic about network change event even if we are offline.
   mLastConnectivityChange = PR_IntervalNow();
 
-  if (mCaptivePortalService) {
-    if (aConnectivity && gCaptivePortalEnabled) {
-      // This will also trigger a captive portal check for the new network
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Start();
-    } else {
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-    }
-  }
-
   nsCOMPtr<nsIObserverService> observerService = services::GetObserverService();
   if (!observerService) {
     return NS_OK;
@@ -1410,19 +1355,6 @@ void nsIOService::PrefsChanged(const cha
     NS_WARNING_ASSERTION(!(size & (size - 1)),
                          "network segment size is not a power of 2!");
   }
-
-  if (!pref || strcmp(pref, NETWORK_CAPTIVE_PORTAL_PREF) == 0) {
-    nsresult rv = Preferences::GetBool(NETWORK_CAPTIVE_PORTAL_PREF,
-                                       &gCaptivePortalEnabled);
-    if (NS_SUCCEEDED(rv) && mCaptivePortalService) {
-      if (gCaptivePortalEnabled) {
-        static_cast<CaptivePortalService*>(mCaptivePortalService.get())
-            ->Start();
-      } else {
-        static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-      }
-    }
-  }
 }
 
 void nsIOService::ParsePortList(const char* pref, bool remove) {
@@ -1554,11 +1486,6 @@ nsIOService::Observe(nsISupports* subjec
 
     SetOffline(true);
 
-    if (mCaptivePortalService) {
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-      mCaptivePortalService = nullptr;
-    }
-
     SSLTokensCache::Shutdown();
 
     DestroySocketProcess();
diff --git a/toolkit/components/captivedetect/CaptiveDetect.jsm b/toolkit/components/captivedetect/CaptiveDetect.jsm
--- a/toolkit/components/captivedetect/CaptiveDetect.jsm
+++ b/toolkit/components/captivedetect/CaptiveDetect.jsm
@@ -24,70 +24,6 @@ const kCaptivePortalLoginSuccessEvent = 
 const kCaptivePortalCheckComplete = "captive-portal-check-complete";
 
 function URLFetcher(url, timeout) {
-  let self = this;
-  let xhr = new XMLHttpRequest();
-  xhr.open("GET", url, true);
-  // Prevent the request from reading from the cache.
-  xhr.channel.loadFlags |= Ci.nsIRequest.LOAD_BYPASS_CACHE;
-  // Prevent the request from writing to the cache.
-  xhr.channel.loadFlags |= Ci.nsIRequest.INHIBIT_CACHING;
-  // Prevent privacy leaks
-  xhr.channel.loadFlags |= Ci.nsIRequest.LOAD_ANONYMOUS;
-  // Use the system's resolver for this check
-  xhr.channel.setTRRMode(Ci.nsIRequest.TRR_DISABLED_MODE);
-  // We except this from being classified
-  xhr.channel.loadFlags |= Ci.nsIChannel.LOAD_BYPASS_URL_CLASSIFIER;
-  // Prevent HTTPS-Only Mode from upgrading the request.
-  xhr.channel.loadInfo.httpsOnlyStatus |= Ci.nsILoadInfo.HTTPS_ONLY_EXEMPT;
-  // Allow deprecated HTTP request from SystemPrincipal
-  xhr.channel.loadInfo.allowDeprecatedSystemRequests = true;
-
-  // We don't want to follow _any_ redirects
-  xhr.channel.QueryInterface(Ci.nsIHttpChannel).redirectionLimit = 0;
-
-  // bug 1666072 - firefox.com returns a HSTS header triggering a https upgrade
-  // but the upgrade triggers an internal redirect causing an incorrect locked
-  // portal notification. We exclude CP detection from STS.
-  xhr.channel.QueryInterface(Ci.nsIHttpChannel).allowSTS = false;
-
-  // The Cache-Control header is only interpreted by proxies and the
-  // final destination. It does not help if a resource is already
-  // cached locally.
-  xhr.setRequestHeader("Cache-Control", "no-cache");
-  // HTTP/1.0 servers might not implement Cache-Control and
-  // might only implement Pragma: no-cache
-  xhr.setRequestHeader("Pragma", "no-cache");
-
-  xhr.timeout = timeout;
-  xhr.ontimeout = function() {
-    self.ontimeout();
-  };
-  xhr.onerror = function() {
-    self.onerror();
-  };
-  xhr.onreadystatechange = function(oEvent) {
-    if (xhr.readyState === 4) {
-      if (self._isAborted) {
-        return;
-      }
-      if (xhr.status === 200) {
-        self.onsuccess(xhr.responseText);
-      } else if (xhr.status) {
-        self.onredirectorerror(xhr.status);
-      } else if (
-        xhr.channel &&
-        xhr.channel.status == Cr.NS_ERROR_REDIRECT_LOOP
-      ) {
-        // For some redirects we don't get a status, so we need to check it
-        // this way. This only works because we set the redirectionLimit to 0.
-        self.onredirectorerror(300);
-        // No need to invoke the onerror callback, we handled it here.
-        xhr.onerror = null;
-      }
-    }
-  };
-  xhr.send();
-  this._xhr = xhr;
 }
 
 URLFetcher.prototype = {
@@ -358,44 +294,7 @@ CaptivePortalDetector.prototype = {
   },
 
   _startDetection: function _startDetection() {
-    debug(
-      "startDetection {site=" +
-        this._canonicalSiteURL +
-        ",content=" +
-        this._canonicalSiteExpectedContent +
-        ",time=" +
-        this._maxWaitingTime +
-        "}"
-    );
-    let self = this;
-
-    let urlFetcher = new URLFetcher(
-      this._canonicalSiteURL,
-      this._maxWaitingTime
-    );
-
-    let mayRetry = this._mayRetry.bind(this);
-
-    urlFetcher.ontimeout = mayRetry;
-    urlFetcher.onerror = mayRetry;
-    urlFetcher.onsuccess = function(content) {
-      if (self.validateContent(content)) {
-        self.executeCallback(true);
-      } else {
-        // Content of the canonical website has been overwrite
-        self._startLogin();
-      }
-    };
-    urlFetcher.onredirectorerror = function(status) {
-      if (status >= 300 && status <= 399) {
-        // The canonical website has been redirected to an unknown location
-        self._startLogin();
-      } else {
-        mayRetry();
-      }
-    };
-
-    this._runningRequest.urlFetcher = urlFetcher;
+    this.executeCallback(false);
   },
 
   _startLogin: function _startLogin() {
