diff --git a/browser/base/content/browser-sync.js b/browser/base/content/browser-sync.js
--- a/browser/base/content/browser-sync.js
+++ b/browser/base/content/browser-sync.js
@@ -126,11 +126,7 @@ var gSync = {
         }
       }
     );
-    XPCOMUtils.defineLazyPreferenceGetter(
-      this,
-      "FXA_ENABLED",
-      "identity.fxaccounts.enabled"
-    );
+    this.FXA_ENABLED = false;
   },
 
   maybeUpdateUIState() {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -661,10 +661,7 @@ var gNavigatorBundle = {
 function updateFxaToolbarMenu(enable, isInitialUpdate = false) {
   // We only show the Firefox Account toolbar menu if the feature is enabled and
   // if sync is enabled.
-  const syncEnabled = Services.prefs.getBoolPref(
-    "identity.fxaccounts.enabled",
-    false
-  );
+  const syncEnabled = false;
   const mainWindowEl = document.documentElement;
   const fxaPanelEl = document.getElementById("PanelUI-fxa");
 
diff --git a/browser/components/aboutlogins/AboutLoginsParent.jsm b/browser/components/aboutlogins/AboutLoginsParent.jsm
--- a/browser/components/aboutlogins/AboutLoginsParent.jsm
+++ b/browser/components/aboutlogins/AboutLoginsParent.jsm
@@ -33,12 +33,9 @@ XPCOMUtils.defineLazyPreferenceGetter(
   "signon.management.page.breach-alerts.enabled",
   false
 );
-XPCOMUtils.defineLazyPreferenceGetter(
-  this,
-  "FXA_ENABLED",
-  "identity.fxaccounts.enabled",
-  false
-);
+
+const FXA_ENABLED = false;
+
 XPCOMUtils.defineLazyPreferenceGetter(
   this,
   "OS_AUTH_ENABLED",
diff --git a/browser/components/customizableui/CustomizableWidgets.jsm b/browser/components/customizableui/CustomizableWidgets.jsm
--- a/browser/components/customizableui/CustomizableWidgets.jsm
+++ b/browser/components/customizableui/CustomizableWidgets.jsm
@@ -610,7 +610,7 @@ const CustomizableWidgets = [
   },
 ];
 
-if (Services.prefs.getBoolPref("identity.fxaccounts.enabled")) {
+if (false) {
   CustomizableWidgets.push({
     id: "sync-button",
     label: "remotetabs-panelmenu.label",
diff --git a/browser/components/newtab/lib/ASRouterTargeting.jsm b/browser/components/newtab/lib/ASRouterTargeting.jsm
--- a/browser/components/newtab/lib/ASRouterTargeting.jsm
+++ b/browser/components/newtab/lib/ASRouterTargeting.jsm
@@ -380,7 +380,7 @@ const TargetingGetters = {
     return Services.prefs.prefHasUserValue(FXA_USERNAME_PREF);
   },
   get isFxAEnabled() {
-    return isFxAEnabled;
+    return false;
   },
   get trailheadInterrupt() {
     return ASRouterPreferences.trailhead.trailheadInterrupt;
diff --git a/browser/components/preferences/main.js b/browser/components/preferences/main.js
--- a/browser/components/preferences/main.js
+++ b/browser/components/preferences/main.js
@@ -82,19 +82,6 @@ const APP_ICON_ATTR_NAME = "appHandlerIc
 
 ChromeUtils.defineModuleGetter(this, "OS", "resource://gre/modules/osfile.jsm");
 
-if (AppConstants.MOZ_DEV_EDITION) {
-  ChromeUtils.defineModuleGetter(
-    this,
-    "fxAccounts",
-    "resource://gre/modules/FxAccounts.jsm"
-  );
-  ChromeUtils.defineModuleGetter(
-    this,
-    "FxAccounts",
-    "resource://gre/modules/FxAccounts.jsm"
-  );
-}
-
 Preferences.addAll([
   // Startup
   { id: "browser.startup.page", type: "int" },
@@ -873,17 +860,6 @@ var gMainPane = {
     if (!win) {
       return;
     }
-    const user = await fxAccounts.getSignedInUser();
-    if (user) {
-      // We have a user, open Sync preferences in the same tab
-      win.openTrustedLinkIn("about:preferences#sync", "current");
-      return;
-    }
-    let url = await FxAccounts.config.promiseConnectAccountURI(
-      "dev-edition-setup"
-    );
-    let accountsTab = win.gBrowser.addWebTab(url);
-    win.gBrowser.selectedTab = accountsTab;
   },
 
   // HOME PAGE
diff --git a/browser/components/preferences/preferences.js b/browser/components/preferences/preferences.js
--- a/browser/components/preferences/preferences.js
+++ b/browser/components/preferences/preferences.js
@@ -83,13 +83,6 @@ function init_all() {
   register_module("paneSearch", gSearchPane);
   register_module("panePrivacy", gPrivacyPane);
   register_module("paneContainers", gContainersPane);
-  if (Services.prefs.getBoolPref("identity.fxaccounts.enabled")) {
-    document.getElementById("category-sync").hidden = false;
-    register_module("paneSync", gSyncPane);
-  } else {
-    // Remove the pane from the DOM so it doesn't get incorrectly included in search results.
-    document.getElementById("template-paneSync").remove();
-  }
   register_module("paneSearchResults", gSearchResultsPane);
   gSearchResultsPane.init();
   gMainPane.preInit();
diff --git a/browser/modules/PageActions.jsm b/browser/modules/PageActions.jsm
--- a/browser/modules/PageActions.jsm
+++ b/browser/modules/PageActions.jsm
@@ -1236,7 +1236,7 @@ var gBuiltInActions = [
 ];
 
 // send to device
-if (Services.prefs.getBoolPref("identity.fxaccounts.enabled")) {
+if (false) {
   gBuiltInActions.push({
     id: "sendToDevice",
     // The actual title is set by each window, per window, and depends on the
diff --git a/services/fxaccounts/FxAccounts.jsm b/services/fxaccounts/FxAccounts.jsm
--- a/services/fxaccounts/FxAccounts.jsm
+++ b/services/fxaccounts/FxAccounts.jsm
@@ -109,12 +109,7 @@ XPCOMUtils.defineLazyModuleGetters(this,
   Preferences: "resource://gre/modules/Preferences.jsm",
 });
 
-XPCOMUtils.defineLazyPreferenceGetter(
-  this,
-  "FXA_ENABLED",
-  "identity.fxaccounts.enabled",
-  true
-);
+const FXA_ENABLED = false;
 
 XPCOMUtils.defineLazyPreferenceGetter(
   this,
diff --git a/services/sync/Weave.jsm b/services/sync/Weave.jsm
--- a/services/sync/Weave.jsm
+++ b/services/sync/Weave.jsm
@@ -139,10 +139,7 @@ WeaveService.prototype = {
    * For that, you'll want to check Weave.Status.checkSetup().
    */
   get enabled() {
-    return (
-      !!syncUsername &&
-      Services.prefs.getBoolPref("identity.fxaccounts.enabled")
-    );
+    return false;
   },
 };
 
diff --git a/toolkit/components/extensions/ExtensionStorageSync.jsm b/toolkit/components/extensions/ExtensionStorageSync.jsm
--- a/toolkit/components/extensions/ExtensionStorageSync.jsm
+++ b/toolkit/components/extensions/ExtensionStorageSync.jsm
@@ -20,12 +20,7 @@ XPCOMUtils.defineLazyModuleGetters(this,
   ExtensionUtils: "resource://gre/modules/ExtensionUtils.jsm",
 });
 
-XPCOMUtils.defineLazyPreferenceGetter(
-  this,
-  "prefPermitsStorageSync",
-  STORAGE_SYNC_ENABLED_PREF,
-  true
-);
+const prefPermitsStorageSync = false;
 
 // This xpcom service implements a "bridge" from the JS world to the Rust world.
 // It sets up the database and implements a callback-based version of the
