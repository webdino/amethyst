diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -980,13 +980,13 @@
 # Blocked plugin content
 - name: browser.safebrowsing.blockedURIs.enabled
   type: bool
-  value: true
+  value: false
   mirror: always
 
 # Malware protection
 - name: browser.safebrowsing.malware.enabled
   type: bool
-  value: true
+  value: false
   mirror: always
 
 # Password protection
@@ -998,7 +998,7 @@
 # Phishing protection
 - name: browser.safebrowsing.phishing.enabled
   type: bool
-  value: true
+  value: false
   mirror: always
 
 # Maximum size for an array to store the safebrowsing prefixset.
diff --git a/netwerk/url-classifier/nsChannelClassifier.cpp b/netwerk/url-classifier/nsChannelClassifier.cpp
--- a/netwerk/url-classifier/nsChannelClassifier.cpp
+++ b/netwerk/url-classifier/nsChannelClassifier.cpp
@@ -345,26 +345,6 @@ nsresult nsChannelClassifier::SendThreat
                                                   const nsACString& aFullHash) {
   NS_ENSURE_ARG_POINTER(aChannel);
 
-  nsAutoCString provider(aProvider);
-  nsPrintfCString reportEnablePref(
-      "browser.safebrowsing.provider.%s.dataSharing.enabled", provider.get());
-  if (!Preferences::GetBool(reportEnablePref.get(), false)) {
-    UC_LOG((
-        "nsChannelClassifier::SendThreatHitReport data sharing disabled for %s",
-        provider.get()));
-    return NS_OK;
-  }
-
-  nsCOMPtr<nsIURIClassifier> uriClassifier =
-      components::UrlClassifierDB::Service();
-  if (!uriClassifier) {
-    return NS_ERROR_UNEXPECTED;
-  }
-
-  nsresult rv =
-      uriClassifier->SendThreatHitReport(aChannel, aProvider, aList, aFullHash);
-  NS_ENSURE_SUCCESS(rv, rv);
-
   return NS_OK;
 }
 
diff --git a/toolkit/components/reputationservice/ApplicationReputation.cpp b/toolkit/components/reputationservice/ApplicationReputation.cpp
--- a/toolkit/components/reputationservice/ApplicationReputation.cpp
+++ b/toolkit/components/reputationservice/ApplicationReputation.cpp
@@ -1555,173 +1555,8 @@ nsresult PendingLookup::SendRemoteQuery(
 }
 
 nsresult PendingLookup::SendRemoteQueryInternal(Reason& aReason) {
-  auto scopeExit = mozilla::MakeScopeExit([&aReason]() {
-    if (aReason == Reason::NotSet) {
-      aReason = Reason::InternalError;
-    }
-  });
-
-  // If we aren't supposed to do remote lookups, bail.
-  if (!Preferences::GetBool(PREF_SB_DOWNLOADS_REMOTE_ENABLED, false)) {
-    LOG(("Remote lookups are disabled [this = %p]", this));
-    aReason = Reason::RemoteLookupDisabled;
-    return NS_ERROR_NOT_AVAILABLE;
-  }
-  // If the remote lookup URL is empty or absent, bail.
-  nsString serviceUrl;
-  nsCOMPtr<nsIURLFormatter> formatter(
-      do_GetService("@mozilla.org/toolkit/URLFormatterService;1"));
-  if (!formatter ||
-      NS_FAILED(formatter->FormatURLPref(
-          NS_ConvertASCIItoUTF16(PREF_SB_APP_REP_URL), serviceUrl)) ||
-      serviceUrl.IsEmpty() || u"about:blank"_ns.Equals(serviceUrl)) {
-    LOG(("Remote lookup URL is empty or absent [this = %p]", this));
     aReason = Reason::RemoteLookupDisabled;
     return NS_ERROR_NOT_AVAILABLE;
-  }
-
-  LOG(("Sending remote query for application reputation [this = %p]", this));
-  // We did not find a local result, so fire off the query to the
-  // application reputation service.
-  nsCOMPtr<nsIURI> uri;
-  nsresult rv;
-  rv = mQuery->GetSourceURI(getter_AddRefs(uri));
-  NS_ENSURE_SUCCESS(rv, rv);
-  nsCString spec;
-  rv = GetStrippedSpec(uri, spec);
-  NS_ENSURE_SUCCESS(rv, rv);
-  mRequest.set_url(spec.get());
-
-  uint32_t fileSize;
-  rv = mQuery->GetFileSize(&fileSize);
-  NS_ENSURE_SUCCESS(rv, rv);
-  mRequest.set_length(fileSize);
-  // We have no way of knowing whether or not a user initiated the
-  // download. Set it to true to lessen the chance of false positives.
-  mRequest.set_user_initiated(true);
-
-  nsCString locale;
-  rv = LocaleService::GetInstance()->GetAppLocaleAsBCP47(locale);
-  NS_ENSURE_SUCCESS(rv, rv);
-  mRequest.set_locale(locale.get());
-  nsCString sha256Hash;
-  rv = mQuery->GetSha256Hash(sha256Hash);
-  NS_ENSURE_SUCCESS(rv, rv);
-  mRequest.mutable_digests()->set_sha256(
-      std::string(sha256Hash.Data(), sha256Hash.Length()));
-  mRequest.set_file_basename(mFileName.get());
-  mRequest.set_download_type(GetDownloadType(mFileName));
-
-  if (mRequest.signature().trusted()) {
-    LOG(
-        ("Got signed binary for remote application reputation check "
-         "[this = %p]",
-         this));
-  } else {
-    LOG(
-        ("Got unsigned binary for remote application reputation check "
-         "[this = %p]",
-         this));
-  }
-
-  // Look for truncated hashes (see bug 1190020)
-  const auto originalHashLength = sha256Hash.Length();
-  if (originalHashLength == 0) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            OriginalHashEmpty);
-  } else if (originalHashLength < 32) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            OriginalHashTooShort);
-  } else if (originalHashLength > 32) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            OriginalHashTooLong);
-  } else if (!mRequest.has_digests()) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            MissingDigest);
-  } else if (!mRequest.digests().has_sha256()) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            MissingSha256);
-  } else if (mRequest.digests().sha256().size() != originalHashLength) {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            InvalidSha256);
-  } else {
-    AccumulateCategorical(
-        mozilla::Telemetry::LABELS_APPLICATION_REPUTATION_HASH_LENGTH::
-            ValidHash);
-  }
-
-  // Serialize the protocol buffer to a string. This can only fail if we are
-  // out of memory, or if the protocol buffer req is missing required fields
-  // (only the URL for now).
-  std::string serialized;
-  if (!mRequest.SerializeToString(&serialized)) {
-    return NS_ERROR_UNEXPECTED;
-  }
-
-  if (LOG_ENABLED()) {
-    nsAutoCString serializedStr(serialized.c_str(), serialized.length());
-    serializedStr.ReplaceSubstring(NS_LITERAL_CSTRING("\0"),
-                                   NS_LITERAL_CSTRING("\\0"));
-
-    LOG(("Serialized protocol buffer [this = %p]: (length=%d) %s", this,
-         serializedStr.Length(), serializedStr.get()));
-  }
-
-  // Set the input stream to the serialized protocol buffer
-  nsCOMPtr<nsIStringInputStream> sstream =
-      do_CreateInstance("@mozilla.org/io/string-input-stream;1", &rv);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  rv = sstream->SetData(serialized.c_str(), serialized.length());
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // Set up the channel to transmit the request to the service.
-  nsCOMPtr<nsIIOService> ios = do_GetService(NS_IOSERVICE_CONTRACTID, &rv);
-  rv = ios->NewChannel(NS_ConvertUTF16toUTF8(serviceUrl), nullptr, nullptr,
-                       nullptr,  // aLoadingNode
-                       nsContentUtils::GetSystemPrincipal(),
-                       nullptr,  // aTriggeringPrincipal
-                       nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL,
-                       nsIContentPolicy::TYPE_OTHER, getter_AddRefs(mChannel));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  mChannel->SetLoadFlags(nsIChannel::LOAD_BYPASS_URL_CLASSIFIER);
-
-  nsCOMPtr<nsILoadInfo> loadInfo = mChannel->LoadInfo();
-  mozilla::OriginAttributes attrs;
-  attrs.mFirstPartyDomain.AssignLiteral(NECKO_SAFEBROWSING_FIRST_PARTY_DOMAIN);
-  loadInfo->SetOriginAttributes(attrs);
-
-  nsCOMPtr<nsIHttpChannel> httpChannel(do_QueryInterface(mChannel, &rv));
-  NS_ENSURE_SUCCESS(rv, rv);
-  mozilla::Unused << httpChannel;
-
-  // Upload the protobuf to the application reputation service.
-  nsCOMPtr<nsIUploadChannel2> uploadChannel = do_QueryInterface(mChannel, &rv);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  rv = uploadChannel->ExplicitSetUploadStream(
-      sstream, NS_LITERAL_CSTRING("application/octet-stream"),
-      serialized.size(), NS_LITERAL_CSTRING("POST"), false);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  uint32_t timeoutMs =
-      Preferences::GetUint(PREF_SB_DOWNLOADS_REMOTE_TIMEOUT, 10000);
-  NS_NewTimerWithCallback(getter_AddRefs(mTimeoutTimer), this, timeoutMs,
-                          nsITimer::TYPE_ONE_SHOT);
-
-  mTelemetryRemoteRequestStartMs = PR_IntervalNow();
-
-  rv = mChannel->AsyncOpen(this);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -1954,34 +1789,7 @@ ApplicationReputationService::QueryReput
 nsresult ApplicationReputationService::QueryReputationInternal(
     nsIApplicationReputationQuery* aQuery,
     nsIApplicationReputationCallback* aCallback) {
-  // If malware checks aren't enabled, don't query application reputation.
-  if (!Preferences::GetBool(PREF_SB_MALWARE_ENABLED, false)) {
     return NS_ERROR_NOT_AVAILABLE;
-  }
-
-  if (!Preferences::GetBool(PREF_SB_DOWNLOADS_ENABLED, false)) {
-    return NS_ERROR_NOT_AVAILABLE;
-  }
-
-  nsCOMPtr<nsIURI> uri;
-  nsresult rv = aQuery->GetSourceURI(getter_AddRefs(uri));
-  NS_ENSURE_SUCCESS(rv, rv);
-  // Bail if the URI hasn't been set.
-  NS_ENSURE_STATE(uri);
-
-  // Create a new pending lookup and start the call chain.
-  RefPtr<PendingLookup> lookup(new PendingLookup(aQuery, aCallback));
-  NS_ENSURE_STATE(lookup);
-
-  // Add an observer for shutdown
-  nsCOMPtr<nsIObserverService> observerService =
-      mozilla::services::GetObserverService();
-  if (!observerService) {
-    return NS_ERROR_FAILURE;
-  }
-
-  observerService->AddObserver(lookup, "quit-application", true);
-  return lookup->StartLookup();
 }
 
 nsresult ApplicationReputationService::IsBinary(const nsACString& aFileName,
diff --git a/toolkit/components/url-classifier/SafeBrowsing.jsm b/toolkit/components/url-classifier/SafeBrowsing.jsm
--- a/toolkit/components/url-classifier/SafeBrowsing.jsm
+++ b/toolkit/components/url-classifier/SafeBrowsing.jsm
@@ -37,9 +37,7 @@ const FEATURES = [
     name: "phishing",
     list: ["urlclassifier.phishTable"],
     enabled() {
-      return Services.prefs.getBoolPref(
-        "browser.safebrowsing.phishing.enabled"
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -52,7 +50,7 @@ const FEATURES = [
     name: "malware",
     list: ["urlclassifier.malwareTable"],
     enabled() {
-      return Services.prefs.getBoolPref("browser.safebrowsing.malware.enabled");
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -65,9 +63,7 @@ const FEATURES = [
     name: "blockedURIs",
     list: ["urlclassifier.blockedTable"],
     enabled() {
-      return Services.prefs.getBoolPref(
-        "browser.safebrowsing.blockedURIs.enabled"
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -80,9 +76,7 @@ const FEATURES = [
     name: "passwords",
     list: ["urlclassifier.passwordAllowTable"],
     enabled() {
-      return Services.prefs.getBoolPref(
-        "browser.safebrowsing.passwords.enabled"
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -98,10 +92,7 @@ const FEATURES = [
       "urlclassifier.downloadAllowTable",
     ],
     enabled() {
-      return (
-        Services.prefs.getBoolPref("browser.safebrowsing.downloads.enabled") &&
-        Services.prefs.getBoolPref("browser.safebrowsing.malware.enabled")
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -135,10 +126,7 @@ const FEATURES = [
       "urlclassifier.trackingWhitelistTable",
     ],
     enabled() {
-      return (
-        Services.prefs.getBoolPref("privacy.trackingprotection.enabled") ||
-        Services.prefs.getBoolPref("privacy.trackingprotection.pbmode.enabled")
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -158,7 +146,7 @@ const FEATURES = [
       "urlclassifier.flashSubDocExceptTable",
     ],
     enabled() {
-      return Services.prefs.getBoolPref("plugins.flashBlock.enabled");
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -175,7 +163,7 @@ const FEATURES = [
     ],
     enabled() {
       // Annotation features are enabled by default.
-      return true;
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -191,10 +179,7 @@ const FEATURES = [
       "urlclassifier.features.fingerprinting.whitelistTables",
     ],
     enabled() {
-      return Services.prefs.getBoolPref(
-        "privacy.trackingprotection.fingerprinting.enabled",
-        false
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -211,7 +196,7 @@ const FEATURES = [
     ],
     enabled() {
       // Annotation features are enabled by default.
-      return true;
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
@@ -227,10 +212,7 @@ const FEATURES = [
       "urlclassifier.features.cryptomining.whitelistTables",
     ],
     enabled() {
-      return Services.prefs.getBoolPref(
-        "privacy.trackingprotection.cryptomining.enabled",
-        false
-      );
+      return false;
     },
     update() {
       return Services.prefs.getBoolPref(
diff --git a/toolkit/components/url-classifier/nsUrlClassifierDBService.cpp b/toolkit/components/url-classifier/nsUrlClassifierDBService.cpp
--- a/toolkit/components/url-classifier/nsUrlClassifierDBService.cpp
+++ b/toolkit/components/url-classifier/nsUrlClassifierDBService.cpp
@@ -1925,92 +1925,6 @@ nsUrlClassifierDBService::SendThreatHitR
     LOG(("nsUrlClassifierDBService::SendThreatHitReport missing fullhash"));
     return NS_ERROR_FAILURE;
   }
-
-  nsPrintfCString reportUrlPref(
-      "browser.safebrowsing.provider.%s.dataSharingURL",
-      PromiseFlatCString(aProvider).get());
-
-  nsCOMPtr<nsIURLFormatter> formatter(
-      do_GetService("@mozilla.org/toolkit/URLFormatterService;1"));
-  if (!formatter) {
-    return NS_ERROR_UNEXPECTED;
-  }
-
-  nsString urlStr;
-  nsresult rv =
-      formatter->FormatURLPref(NS_ConvertUTF8toUTF16(reportUrlPref), urlStr);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  if (urlStr.IsEmpty() || NS_LITERAL_STRING("about:blank").Equals(urlStr)) {
-    LOG(("%s is missing a ThreatHit data reporting URL.",
-         PromiseFlatCString(aProvider).get()));
-    return NS_OK;
-  }
-
-  nsUrlClassifierUtils* utilsService = nsUrlClassifierUtils::GetInstance();
-  if (NS_WARN_IF(!utilsService)) {
-    return NS_ERROR_FAILURE;
-  }
-
-  nsAutoCString reportBody;
-  rv =
-      utilsService->MakeThreatHitReport(aChannel, aList, aFullHash, reportBody);
-  NS_ENSURE_SUCCESS(rv, rv);
-  nsCOMPtr<nsIStringInputStream> sis(
-      do_CreateInstance(NS_STRINGINPUTSTREAM_CONTRACTID));
-  rv = sis->SetData(reportBody.get(), reportBody.Length());
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  LOG(("Sending the following ThreatHit report to %s about %s: %s",
-       PromiseFlatCString(aProvider).get(), PromiseFlatCString(aList).get(),
-       reportBody.get()));
-
-  nsCOMPtr<nsIURI> reportURI;
-  rv = NS_NewURI(getter_AddRefs(reportURI), urlStr);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  uint32_t loadFlags = nsIRequest::LOAD_ANONYMOUS |  // no cookies
-                       nsIChannel::INHIBIT_CACHING |
-                       nsIChannel::LOAD_BYPASS_CACHE;
-
-  nsCOMPtr<nsIChannel> reportChannel;
-  rv = NS_NewChannel(getter_AddRefs(reportChannel), reportURI,
-                     nsContentUtils::GetSystemPrincipal(),
-                     nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL,
-                     nsIContentPolicy::TYPE_OTHER,
-                     nullptr,  // nsICookieJarSettings
-                     nullptr,  // aPerformanceStorage
-                     nullptr,  // aLoadGroup
-                     nullptr, loadFlags);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsCOMPtr<nsILoadInfo> loadInfo = reportChannel->LoadInfo();
-  mozilla::OriginAttributes attrs;
-  attrs.mFirstPartyDomain.AssignLiteral(NECKO_SAFEBROWSING_FIRST_PARTY_DOMAIN);
-  loadInfo->SetOriginAttributes(attrs);
-
-  nsCOMPtr<nsIUploadChannel> uploadChannel(do_QueryInterface(reportChannel));
-  NS_ENSURE_TRUE(uploadChannel, NS_ERROR_FAILURE);
-  rv = uploadChannel->SetUploadStream(
-      sis, NS_LITERAL_CSTRING("application/x-protobuf"), -1);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsCOMPtr<nsIHttpChannel> httpChannel(do_QueryInterface(reportChannel));
-  NS_ENSURE_TRUE(httpChannel, NS_ERROR_FAILURE);
-  rv = httpChannel->SetRequestMethod(NS_LITERAL_CSTRING("POST"));
-  NS_ENSURE_SUCCESS(rv, rv);
-  // Disable keepalive.
-  rv = httpChannel->SetRequestHeader(NS_LITERAL_CSTRING("Connection"),
-                                     NS_LITERAL_CSTRING("close"), false);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  RefPtr<ThreatHitReportListener> listener = new ThreatHitReportListener();
-  rv = reportChannel->AsyncOpen(listener);
-  if (NS_FAILED(rv)) {
-    LOG(("Failure to send Safe Browsing ThreatHit report"));
-    return rv;
-  }
-
   return NS_OK;
 }
 
diff --git a/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp b/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
--- a/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
+++ b/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
@@ -121,114 +121,6 @@ void nsUrlClassifierStreamUpdater::Downl
 nsresult nsUrlClassifierStreamUpdater::FetchUpdate(
     nsIURI* aUpdateUrl, const nsACString& aRequestPayload, bool aIsPostRequest,
     const nsACString& aStreamTable) {
-#ifdef DEBUG
-  LOG(("Fetching update %s from %s", aRequestPayload.Data(),
-       aUpdateUrl->GetSpecOrDefault().get()));
-#endif
-
-  // SafeBrowsing update request should never be classified to make sure
-  // we can recover from a bad SafeBrowsing database.
-  nsresult rv;
-  uint32_t loadFlags = nsIChannel::INHIBIT_CACHING |
-                       nsIChannel::LOAD_BYPASS_CACHE |
-                       nsIChannel::LOAD_BYPASS_URL_CLASSIFIER;
-  rv = NS_NewChannel(getter_AddRefs(mChannel), aUpdateUrl,
-                     nsContentUtils::GetSystemPrincipal(),
-                     nsILoadInfo::SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL,
-                     nsIContentPolicy::TYPE_OTHER,
-                     nullptr,  // nsICookieJarSettings
-                     nullptr,  // aPerformanceStorage
-                     nullptr,  // aLoadGroup
-                     this,     // aInterfaceRequestor
-                     loadFlags);
-
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsCOMPtr<nsILoadInfo> loadInfo = mChannel->LoadInfo();
-  mozilla::OriginAttributes attrs;
-  attrs.mFirstPartyDomain.AssignLiteral(NECKO_SAFEBROWSING_FIRST_PARTY_DOMAIN);
-  loadInfo->SetOriginAttributes(attrs);
-  // allow deprecated HTTP request from SystemPrincipal
-  loadInfo->SetAllowDeprecatedSystemRequests(true);
-
-  mBeganStream = false;
-
-  if (!aIsPostRequest) {
-    // We use POST method to send our request in v2. In v4, the request
-    // needs to be embedded to the URL and use GET method to send.
-    // However, from the Chromium source code, a extended HTTP header has
-    // to be sent along with the request to make the request succeed.
-    // The following description is from Chromium source code:
-    //
-    // "The following header informs the envelope server (which sits in
-    // front of Google's stubby server) that the received GET request should be
-    // interpreted as a POST."
-    //
-    nsCOMPtr<nsIHttpChannel> httpChannel = do_QueryInterface(mChannel, &rv);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    rv = httpChannel->SetRequestHeader(
-        NS_LITERAL_CSTRING("X-HTTP-Method-Override"),
-        NS_LITERAL_CSTRING("POST"), false);
-    NS_ENSURE_SUCCESS(rv, rv);
-  } else if (!aRequestPayload.IsEmpty()) {
-    rv = AddRequestBody(aRequestPayload);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  // Set the appropriate content type for file/data URIs, for unit testing
-  // purposes.
-  // This is only used for testing and should be deleted.
-  if (aUpdateUrl->SchemeIs("file") || aUpdateUrl->SchemeIs("data")) {
-    mChannel->SetContentType(
-        NS_LITERAL_CSTRING("application/vnd.google.safebrowsing-update"));
-  } else {
-    // We assume everything else is an HTTP request.
-
-    // Disable keepalive.
-    nsCOMPtr<nsIHttpChannel> httpChannel = do_QueryInterface(mChannel, &rv);
-    NS_ENSURE_SUCCESS(rv, rv);
-    rv = httpChannel->SetRequestHeader(NS_LITERAL_CSTRING("Connection"),
-                                       NS_LITERAL_CSTRING("close"), false);
-    NS_ENSURE_SUCCESS(rv, rv);
-  }
-
-  // Make the request.
-  rv = mChannel->AsyncOpen(this);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  mTelemetryClockStart = PR_IntervalNow();
-  mStreamTable = aStreamTable;
-
-  static bool preferencesInitialized = false;
-
-  if (!preferencesInitialized) {
-    mozilla::Preferences::AddUintVarCache(
-        &sTimeoutMs, "urlclassifier.update.timeout_ms", DEFAULT_TIMEOUT_MS);
-    mozilla::Preferences::AddUintVarCache(
-        &sResponseTimeoutMs, "urlclassifier.update.response_timeout_ms",
-        DEFAULT_RESPONSE_TIMEOUT_MS);
-    preferencesInitialized = true;
-  }
-
-  if (sResponseTimeoutMs > sTimeoutMs) {
-    NS_WARNING(
-        "Safe Browsing response timeout is greater than the general "
-        "timeout. Disabling these update timeouts.");
-    return NS_OK;
-  }
-  MOZ_TRY_VAR(mResponseTimeoutTimer,
-              NS_NewTimerWithCallback(this, sResponseTimeoutMs,
-                                      nsITimer::TYPE_ONE_SHOT));
-
-  MOZ_TRY_VAR(mTimeoutTimer, NS_NewTimerWithCallback(this, sTimeoutMs,
-                                                     nsITimer::TYPE_ONE_SHOT));
-
-  if (sTimeoutMs < DEFAULT_TIMEOUT_MS) {
-    LOG(("Download update timeout %d ms (< %d ms) would be too small",
-         sTimeoutMs, DEFAULT_TIMEOUT_MS));
-  }
-
   return NS_OK;
 }

