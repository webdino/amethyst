diff --git a/toolkit/components/search/SearchService.jsm b/toolkit/components/search/SearchService.jsm
--- a/toolkit/components/search/SearchService.jsm
+++ b/toolkit/components/search/SearchService.jsm
@@ -31,12 +31,7 @@ XPCOMUtils.defineLazyServiceGetters(this
   gEnvironment: ["@mozilla.org/process/environment;1", "nsIEnvironment"],
 });
 
-XPCOMUtils.defineLazyPreferenceGetter(
-  this,
-  "gGeoSpecificDefaultsEnabled",
-  SearchUtils.BROWSER_SEARCH_PREF + "geoSpecificDefaults",
-  false
-);
+const gGeoSpecificDefaultsEnabled = false;
 
 // Can't use defineLazyPreferenceGetter because we want the value
 // from the default branch
@@ -259,131 +254,6 @@ function storeRegion(region) {
 
 // Get the region we are in via a XHR geoip request.
 function fetchRegion(ss) {
-  // values for the SEARCH_SERVICE_COUNTRY_FETCH_RESULT 'enum' telemetry probe.
-  const TELEMETRY_RESULT_ENUM = {
-    SUCCESS: 0,
-    SUCCESS_WITHOUT_DATA: 1,
-    XHRTIMEOUT: 2,
-    ERROR: 3,
-    // Note that we expect to add finer-grained error types here later (eg,
-    // dns error, network error, ssl error, etc) with .ERROR remaining as the
-    // generic catch-all that doesn't fit into other categories.
-  };
-  let endpoint = Services.urlFormatter.formatURLPref(
-    "browser.search.geoip.url"
-  );
-  SearchUtils.log("_fetchRegion starting with endpoint " + endpoint);
-  // As an escape hatch, no endpoint means no geoip.
-  if (!endpoint) {
-    return Promise.resolve();
-  }
-  let startTime = Date.now();
-  return new Promise(resolve => {
-    // Instead of using a timeout on the xhr object itself, we simulate one
-    // using a timer and let the XHR request complete.  This allows us to
-    // capture reliable telemetry on what timeout value should actually be
-    // used to ensure most users don't see one while not making it so large
-    // that many users end up doing a sync init of the search service and thus
-    // would see the jank that implies.
-    // (Note we do actually use a timeout on the XHR, but that's set to be a
-    // large value just incase the request never completes - we don't want the
-    // XHR object to live forever)
-    let timeoutMS = Services.prefs.getIntPref("browser.search.geoip.timeout");
-    let geoipTimeoutPossible = true;
-    let timerId = setTimeout(() => {
-      SearchUtils.log("_fetchRegion: timeout fetching region information");
-      if (geoipTimeoutPossible) {
-        Services.telemetry
-          .getHistogramById("SEARCH_SERVICE_COUNTRY_TIMEOUT")
-          .add(1);
-      }
-      timerId = null;
-      resolve();
-    }, timeoutMS);
-
-    let resolveAndReportSuccess = (result, reason) => {
-      // Even if we timed out, we want to save the region and everything
-      // related so next startup sees the value and doesn't retry this dance.
-      if (result) {
-        storeRegion(result);
-      }
-      Services.telemetry
-        .getHistogramById("SEARCH_SERVICE_COUNTRY_FETCH_RESULT")
-        .add(reason);
-
-      // This notification is just for tests...
-      Services.obs.notifyObservers(
-        null,
-        SearchUtils.TOPIC_SEARCH_SERVICE,
-        "geoip-lookup-xhr-complete"
-      );
-
-      if (timerId) {
-        Services.telemetry
-          .getHistogramById("SEARCH_SERVICE_COUNTRY_TIMEOUT")
-          .add(0);
-        geoipTimeoutPossible = false;
-      }
-
-      let callback = () => {
-        // If we've already timed out then we've already resolved the promise,
-        // so there's nothing else to do.
-        if (timerId == null) {
-          return;
-        }
-        clearTimeout(timerId);
-        resolve();
-      };
-
-      if (result && gGeoSpecificDefaultsEnabled) {
-        fetchRegionDefault(ss)
-          .then(callback)
-          .catch(err => {
-            Cu.reportError(err);
-            callback();
-          });
-      } else {
-        callback();
-      }
-    };
-
-    let request = new XMLHttpRequest();
-    // This notification is just for tests...
-    Services.obs.notifyObservers(
-      request,
-      SearchUtils.TOPIC_SEARCH_SERVICE,
-      "geoip-lookup-xhr-starting"
-    );
-    request.timeout = 100000; // 100 seconds as the last-chance fallback
-    request.onload = function(event) {
-      let took = Date.now() - startTime;
-      let region = event.target.response && event.target.response.country_code;
-      SearchUtils.log(
-        "_fetchRegion got success response in " + took + "ms: " + region
-      );
-      Services.telemetry
-        .getHistogramById("SEARCH_SERVICE_COUNTRY_FETCH_TIME_MS")
-        .add(took);
-      let reason = region
-        ? TELEMETRY_RESULT_ENUM.SUCCESS
-        : TELEMETRY_RESULT_ENUM.SUCCESS_WITHOUT_DATA;
-      resolveAndReportSuccess(region, reason);
-    };
-    request.ontimeout = function(event) {
-      SearchUtils.log(
-        "_fetchRegion: XHR finally timed-out fetching region information"
-      );
-      resolveAndReportSuccess(null, TELEMETRY_RESULT_ENUM.XHRTIMEOUT);
-    };
-    request.onerror = function(event) {
-      SearchUtils.log("_fetchRegion: failed to retrieve region information");
-      resolveAndReportSuccess(null, TELEMETRY_RESULT_ENUM.ERROR);
-    };
-    request.open("POST", endpoint, true);
-    request.setRequestHeader("Content-Type", "application/json");
-    request.responseType = "json";
-    request.send("{}");
-  });
 }
 
 // This converts our legacy google engines to the
@@ -425,97 +295,7 @@ function convertGoogleEngines(engineName
 // block the async init for too long.
 var fetchRegionDefault = ss =>
   new Promise(resolve => {
-    let urlTemplate = Services.prefs
-      .getDefaultBranch(SearchUtils.BROWSER_SEARCH_PREF)
-      .getCharPref("geoSpecificDefaults.url");
-    let endpoint = Services.urlFormatter.formatURL(urlTemplate);
-
-    // As an escape hatch, no endpoint means no region specific defaults.
-    if (!endpoint) {
       resolve();
-      return;
-    }
-
-    // Append the optional cohort value.
-    const cohortPref = "browser.search.cohort";
-    let cohort = Services.prefs.getCharPref(cohortPref, "");
-    if (cohort) {
-      endpoint += "/" + cohort;
-    }
-
-    SearchUtils.log("fetchRegionDefault starting with endpoint " + endpoint);
-
-    let startTime = Date.now();
-    let request = new XMLHttpRequest();
-    request.timeout = 100000; // 100 seconds as the last-chance fallback
-    request.onload = function(event) {
-      let took = Date.now() - startTime;
-
-      let status = event.target.status;
-      if (status != 200) {
-        SearchUtils.log("fetchRegionDefault failed with HTTP code " + status);
-        let retryAfter = request.getResponseHeader("retry-after");
-        if (retryAfter) {
-          ss.setGlobalAttr(
-            "searchDefaultExpir",
-            Date.now() + retryAfter * 1000
-          );
-        }
-        resolve();
-        return;
-      }
-
-      let response = event.target.response || {};
-      SearchUtils.log("received " + response.toSource());
-
-      if (response.cohort) {
-        Services.prefs.setCharPref(cohortPref, response.cohort);
-      } else {
-        Services.prefs.clearUserPref(cohortPref);
-      }
-
-      if (response.settings && response.settings.searchDefault) {
-        let defaultEngine = response.settings.searchDefault;
-        ss.setVerifiedGlobalAttr("searchDefault", defaultEngine);
-        SearchUtils.log(
-          "fetchRegionDefault saved searchDefault: " + defaultEngine
-        );
-      }
-
-      if (response.settings && response.settings.visibleDefaultEngines) {
-        let visibleDefaultEngines = response.settings.visibleDefaultEngines;
-        let string = visibleDefaultEngines.join(",");
-        ss.setVerifiedGlobalAttr("visibleDefaultEngines", string);
-        SearchUtils.log(
-          "fetchRegionDefault saved visibleDefaultEngines: " + string
-        );
-      }
-
-      let interval = response.interval || SEARCH_GEO_DEFAULT_UPDATE_INTERVAL;
-      let milliseconds = interval * 1000; // |interval| is in seconds.
-      ss.setGlobalAttr("searchDefaultExpir", Date.now() + milliseconds);
-
-      SearchUtils.log(
-        "fetchRegionDefault got success response in " + took + "ms"
-      );
-      // If we're doing this somewhere during the app's lifetime, reload the list
-      // of engines in order to pick up any geo-specific changes.
-      ss._maybeReloadEngines().finally(resolve);
-    };
-    request.ontimeout = function(event) {
-      SearchUtils.log("fetchRegionDefault: XHR finally timed-out");
-      resolve();
-    };
-    request.onerror = function(event) {
-      SearchUtils.log(
-        "fetchRegionDefault: failed to retrieve territory default information"
-      );
-      resolve();
-    };
-    request.open("GET", endpoint, true);
-    request.setRequestHeader("Content-Type", "application/json");
-    request.responseType = "json";
-    request.send();
   });
 
 /**
@@ -2957,53 +2737,6 @@ SearchService.prototype = {
 
   // nsITimerCallback
   notify(timer) {
-    SearchUtils.log("_notify: checking for updates");
-
-    if (
-      !Services.prefs.getBoolPref(
-        SearchUtils.BROWSER_SEARCH_PREF + "update",
-        true
-      )
-    ) {
-      return;
-    }
-
-    // Our timer has expired, but unfortunately, we can't get any data from it.
-    // Therefore, we need to walk our engine-list, looking for expired engines
-    var currentTime = Date.now();
-    SearchUtils.log("currentTime: " + currentTime);
-    for (let name in this._engines) {
-      let engine = this._engines[name].wrappedJSObject;
-      if (!engine._hasUpdates) {
-        continue;
-      }
-
-      SearchUtils.log("checking " + engine.name);
-
-      var expirTime = engine.getAttr("updateexpir");
-      SearchUtils.log(
-        "expirTime: " +
-          expirTime +
-          "\nupdateURL: " +
-          engine._updateURL +
-          "\niconUpdateURL: " +
-          engine._iconUpdateURL
-      );
-
-      var engineExpired = expirTime <= currentTime;
-
-      if (!expirTime || !engineExpired) {
-        SearchUtils.log("skipping engine");
-        continue;
-      }
-
-      SearchUtils.log(engine.name + " has expired");
-
-      engineUpdateService.update(engine);
-
-      // Schedule the next update
-      engineUpdateService.scheduleNextUpdate(engine);
-    } // end engine iteration
   },
 
   _addObservers() {
@@ -3085,46 +2818,6 @@ var engineUpdateService = {
   },
 
   update(engine) {
-    engine = engine.wrappedJSObject;
-    this._log("update called for " + engine._name);
-    if (
-      !Services.prefs.getBoolPref(
-        SearchUtils.BROWSER_SEARCH_PREF + "update",
-        true
-      ) ||
-      !engine._hasUpdates
-    ) {
-      return;
-    }
-
-    let testEngine = null;
-    let updateURL = engine._getURLOfType(SearchUtils.URL_TYPE.OPENSEARCH);
-    let updateURI =
-      updateURL && updateURL._hasRelation("self")
-        ? updateURL.getSubmission("", engine).uri
-        : makeURI(engine._updateURL);
-    if (updateURI) {
-      if (engine._isDefault && !updateURI.schemeIs("https")) {
-        this._log("Invalid scheme for default engine update");
-        return;
-      }
-
-      this._log("updating " + engine.name + " from " + updateURI.spec);
-      testEngine = new SearchEngine({
-        uri: updateURI,
-        readOnly: false,
-      });
-      testEngine._engineToUpdate = engine;
-      testEngine._initFromURIAndLoad(updateURI);
-    } else {
-      this._log("invalid updateURI");
-    }
-
-    if (engine._iconUpdateURL) {
-      // If we're updating the engine too, use the new engine object,
-      // otherwise use the existing engine object.
-      (testEngine || engine)._setIcon(engine._iconUpdateURL, true);
-    }
   },
 
   /**
diff --git a/toolkit/components/search/toolkitsearch.manifest b/toolkit/components/search/toolkitsearch.manifest
--- a/toolkit/components/search/toolkitsearch.manifest
+++ b/toolkit/components/search/toolkitsearch.manifest
@@ -1,2 +1,1 @@
 # 21600 == 6 hours
-category update-timer nsSearchService @mozilla.org/browser/search-service;1,getService,search-engine-update-timer,browser.search.update.interval,21600
