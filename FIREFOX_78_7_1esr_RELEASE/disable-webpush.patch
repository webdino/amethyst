diff --git a/dom/push/PushService.jsm b/dom/push/PushService.jsm
--- a/dom/push/PushService.jsm
+++ b/dom/push/PushService.jsm
@@ -332,12 +332,6 @@ var PushService = {
               CHANGING_SERVICE_EVENT
             )
           );
-        } else if (aData == "dom.push.connection.enabled") {
-          this._stateChangeProcessEnqueue(_ =>
-            this._changeStateConnectionEnabledEvent(
-              prefs.get("connection.enabled")
-            )
-          );
         }
         break;
 
@@ -451,7 +445,7 @@ var PushService = {
         }
         return this._startService(service, uri, options).then(_ =>
           this._changeStateConnectionEnabledEvent(
-            prefs.get("connection.enabled")
+            false
           )
         );
       }
@@ -463,7 +457,7 @@ var PushService = {
             // The service has not been running - start it.
             return this._startService(service, uri, options).then(_ =>
               this._changeStateConnectionEnabledEvent(
-                prefs.get("connection.enabled")
+                false
               )
             );
           }
@@ -475,7 +469,7 @@ var PushService = {
             .then(_ => this._startService(service, uri, options))
             .then(_ =>
               this._changeStateConnectionEnabledEvent(
-                prefs.get("connection.enabled")
+                false
               )
             );
         }
@@ -552,9 +546,6 @@ var PushService = {
     // networks; in such a case we rely on timeout.
     Services.obs.addObserver(this, "network:offline-status-changed");
 
-    // Used to monitor if the user wishes to disable Push.
-    prefs.observe("connection.enabled", this);
-
     // Prunes expired registrations and notifies dormant service workers.
     Services.obs.addObserver(this, "idle-daily");
 
@@ -637,8 +628,6 @@ var PushService = {
       return;
     }
 
-    prefs.ignore("connection.enabled", this);
-
     Services.obs.removeObserver(this, "network:offline-status-changed");
     Services.obs.removeObserver(this, "clear-origin-attributes-data");
     Services.obs.removeObserver(this, "idle-daily");
diff --git a/dom/push/PushServiceHttp2.jsm b/dom/push/PushServiceHttp2.jsm
--- a/dom/push/PushServiceHttp2.jsm
+++ b/dom/push/PushServiceHttp2.jsm
@@ -97,9 +97,6 @@ PushSubscriptionListener.prototype = {
   },
 
   onPush(associatedChannel, pushChannel) {
-    console.debug("PushSubscriptionListener: onPush()");
-    var pushChannelListener = new PushChannelListener(this);
-    pushChannel.asyncOpen(pushChannelListener);
   },
 
   disconnect() {
@@ -450,16 +447,7 @@ var PushServiceHttp2 = {
   },
 
   _makeChannel(aUri) {
-    var chan = NetUtil.newChannel({
-      uri: aUri,
-      loadUsingSystemPrincipal: true,
-    }).QueryInterface(Ci.nsIHttpChannel);
-
-    var loadGroup = Cc["@mozilla.org/network/load-group;1"].createInstance(
-      Ci.nsILoadGroup
-    );
-    chan.loadGroup = loadGroup;
-    return chan;
+    return null;
   },
 
   /**
@@ -493,30 +481,13 @@ var PushServiceHttp2 = {
     console.debug("subscribeResourceInternal()");
 
     return new Promise((resolve, reject) => {
-      var listener = new SubscriptionListener(
-        aSubInfo,
-        resolve,
-        reject,
-        this._serverURI,
-        this
-      );
-
-      var chan = this._makeChannel(this._serverURI.spec);
-      chan.requestMethod = "POST";
-      chan.asyncOpen(listener);
-    }).catch(err => {
-      if ("retry" in err) {
-        return this._subscribeResourceInternal(err.subInfo);
-      }
-      throw err;
+      reject(new Error("Push service unavailable"));
     });
   },
 
   _deleteResource(aUri) {
     return new Promise((resolve, reject) => {
-      var chan = this._makeChannel(aUri);
-      chan.requestMethod = "DELETE";
-      chan.asyncOpen(new PushServiceDelete(resolve, reject));
+      reject(new Error("Error removing subscription: 404"));
     });
   },
 
@@ -535,39 +506,11 @@ var PushServiceHttp2 = {
    */
   _listenForMsgs(aSubscriptionUri) {
     console.debug("listenForMsgs()", aSubscriptionUri);
-    if (!this._conns[aSubscriptionUri]) {
       console.warn(
         "listenForMsgs: We do not have this subscription",
         aSubscriptionUri
       );
       return;
-    }
-
-    var chan = this._makeChannel(aSubscriptionUri);
-    var conn = {};
-    conn.channel = chan;
-    var listener = new PushSubscriptionListener(this, aSubscriptionUri);
-    conn.listener = listener;
-
-    chan.notificationCallbacks = listener;
-
-    try {
-      chan.asyncOpen(listener);
-    } catch (e) {
-      console.error(
-        "listenForMsgs: Error connecting to push server.",
-        "asyncOpen failed",
-        e
-      );
-      conn.listener.disconnect();
-      chan.cancel(Cr.NS_ERROR_ABORT);
-      this._retryAfterBackoff(aSubscriptionUri, -1);
-      return;
-    }
-
-    this._conns[aSubscriptionUri].lastStartListening = Date.now();
-    this._conns[aSubscriptionUri].channel = conn.channel;
-    this._conns[aSubscriptionUri].listener = conn.listener;
   },
 
   _ackMsgRecv(aAckUri) {
diff --git a/dom/push/PushServiceWebSocket.jsm b/dom/push/PushServiceWebSocket.jsm
--- a/dom/push/PushServiceWebSocket.jsm
+++ b/dom/push/PushServiceWebSocket.jsm
@@ -321,16 +321,10 @@ var PushServiceWebSocket = {
    * typeof(msg) shall be an object
    */
   _wsSendMessage(msg) {
-    if (!this._ws) {
       console.warn(
         "wsSendMessage: No WebSocket initialized.",
         "Cannot send a message"
       );
-      return;
-    }
-    msg = JSON.stringify(msg);
-    console.debug("wsSendMessage: Sending message", msg);
-    this._ws.sendMsg(msg);
   },
 
   init(options, mainPushService, serverURI) {
@@ -369,14 +363,6 @@ var PushServiceWebSocket = {
     this._currentState = STATE_SHUT_DOWN;
     this._skipReconnect = false;
 
-    if (this._wsListener) {
-      this._wsListener._pushService = null;
-    }
-    try {
-      this._ws.close(0, null);
-    } catch (e) {}
-    this._ws = null;
-
     this._lastPingTime = 0;
 
     if (this._pingTimer) {
@@ -516,46 +502,10 @@ var PushServiceWebSocket = {
 
   _beginWSSetup() {
     console.debug("beginWSSetup()");
-    if (this._currentState != STATE_SHUT_DOWN) {
       console.error(
         "_beginWSSetup: Not in shutdown state! Current state",
         this._currentState
       );
-      return;
-    }
-
-    // Stop any pending reconnects scheduled for the near future.
-    if (this._backoffTimer) {
-      this._backoffTimer.cancel();
-    }
-
-    let uri = this._serverURI;
-    if (!uri) {
-      return;
-    }
-    let socket = this._makeWebSocket(uri);
-    if (!socket) {
-      return;
-    }
-    this._ws = socket.QueryInterface(Ci.nsIWebSocketChannel);
-
-    console.debug("beginWSSetup: Connecting to", uri.spec);
-    this._wsListener = new PushWebSocketListener(this);
-    this._ws.protocol = "push-notification";
-
-    try {
-      // Grab a wakelock before we open the socket to ensure we don't go to
-      // sleep before connection the is opened.
-      this._ws.asyncOpen(uri, uri.spec, 0, this._wsListener, null);
-      this._currentState = STATE_WAITING_FOR_WS_START;
-    } catch (e) {
-      console.error(
-        "beginWSSetup: Error opening websocket.",
-        "asyncOpen failed",
-        e
-      );
-      this._reconnect();
-    }
   },
 
   connect(broadcastListeners) {
