diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -35,7 +35,6 @@ const PREF_EM_LAST_PLATFORM_VERSION = "e
 const PREF_EM_AUTOUPDATE_DEFAULT = "extensions.update.autoUpdateDefault";
 const PREF_EM_STRICT_COMPATIBILITY = "extensions.strictCompatibility";
 const PREF_EM_CHECK_UPDATE_SECURITY = "extensions.checkUpdateSecurity";
-const PREF_SYS_ADDON_UPDATE_ENABLED = "extensions.systemAddon.update.enabled";
 
 const PREF_MIN_WEBEXT_PLATFORM_VERSION =
   "extensions.webExtensionsMinPlatformVersion";
@@ -1388,13 +1387,7 @@ var AddonManagerInternal = {
 
   // Returns true if System Addons should be updated
   systemUpdateEnabled() {
-    if (!Services.prefs.getBoolPref(PREF_SYS_ADDON_UPDATE_ENABLED)) {
       return false;
-    }
-    if (Services.policies && !Services.policies.isAllowed("SysAddonUpdate")) {
-      return false;
-    }
-    return true;
   },
 
   /**
@@ -3073,7 +3066,7 @@ var AddonManagerInternal = {
   },
 
   get autoUpdateDefault() {
-    return gAutoUpdateDefault;
+    return false;
   },
 
   set autoUpdateDefault(aValue) {
@@ -3133,7 +3126,7 @@ var AddonManagerInternal = {
   },
 
   get updateEnabled() {
-    return gUpdateEnabled;
+    return false;
   },
 
   set updateEnabled(aValue) {
@@ -4135,23 +4128,7 @@ var AddonManager = {
    * @return true if the addon should auto-update, false otherwise.
    */
   shouldAutoUpdate(aAddon) {
-    if (!aAddon || typeof aAddon != "object") {
-      throw Components.Exception(
-        "aAddon must be specified",
-        Cr.NS_ERROR_INVALID_ARG
-      );
-    }
-
-    if (!("applyBackgroundUpdates" in aAddon)) {
       return false;
-    }
-    if (aAddon.applyBackgroundUpdates == AddonManager.AUTOUPDATE_ENABLE) {
-      return true;
-    }
-    if (aAddon.applyBackgroundUpdates == AddonManager.AUTOUPDATE_DISABLE) {
-      return false;
-    }
-    return this.autoUpdateDefault;
   },
 
   get checkCompatibility() {
diff --git a/toolkit/mozapps/extensions/Blocklist.jsm b/toolkit/mozapps/extensions/Blocklist.jsm
--- a/toolkit/mozapps/extensions/Blocklist.jsm
+++ b/toolkit/mozapps/extensions/Blocklist.jsm
@@ -1284,7 +1284,7 @@ const EXTENSION_BLOCK_FILTERS = [
 ];
 
 var gLoggingEnabled = null;
-var gBlocklistEnabled = true;
+var gBlocklistEnabled = false;
 var gBlocklistLevel = DEFAULT_LEVEL;
 
 class BlocklistError extends Error {}
@@ -1716,152 +1716,6 @@ var BlocklistXML = {
   },
 
   notify(aTimer) {
-    if (!gBlocklistEnabled) {
-      return;
-    }
-
-    try {
-      var dsURI = Services.prefs.getCharPref(PREF_BLOCKLIST_URL);
-    } catch (e) {
-      LOG(
-        "Blocklist::notify: The " +
-          PREF_BLOCKLIST_URL +
-          " preference" +
-          " is missing!"
-      );
-      return;
-    }
-
-    var pingCountVersion = Services.prefs.getIntPref(
-      PREF_BLOCKLIST_PINGCOUNTVERSION,
-      0
-    );
-    var pingCountTotal = Services.prefs.getIntPref(
-      PREF_BLOCKLIST_PINGCOUNTTOTAL,
-      1
-    );
-    var daysSinceLastPing = 0;
-    if (pingCountVersion == 0) {
-      daysSinceLastPing = "new";
-    } else {
-      // Seconds in one day is used because nsIUpdateTimerManager stores the
-      // last update time in seconds.
-      let secondsInDay = 60 * 60 * 24;
-      let lastUpdateTime = Services.prefs.getIntPref(
-        PREF_BLOCKLIST_LASTUPDATETIME,
-        0
-      );
-      if (lastUpdateTime == 0) {
-        daysSinceLastPing = "invalid";
-      } else {
-        let now = Math.round(Date.now() / 1000);
-        daysSinceLastPing = Math.floor((now - lastUpdateTime) / secondsInDay);
-      }
-
-      if (daysSinceLastPing == 0 || daysSinceLastPing == "invalid") {
-        pingCountVersion = pingCountTotal = "invalid";
-      }
-    }
-
-    if (pingCountVersion < 1) {
-      pingCountVersion = 1;
-    }
-    if (pingCountTotal < 1) {
-      pingCountTotal = 1;
-    }
-
-    let replacements = {
-      APP_ID: gAppID,
-      PRODUCT: gApp.name,
-      BUILD_ID: gApp.appBuildID,
-      BUILD_TARGET: gApp.OS + "_" + gABI,
-      OS_VERSION: gOSVersion,
-      LOCALE: Services.locale.requestedLocale,
-      CHANNEL: UpdateUtils.UpdateChannel,
-      PLATFORM_VERSION: gApp.platformVersion,
-      DISTRIBUTION: getDistributionPrefValue(PREF_APP_DISTRIBUTION),
-      DISTRIBUTION_VERSION: getDistributionPrefValue(
-        PREF_APP_DISTRIBUTION_VERSION
-      ),
-      PING_COUNT: pingCountVersion,
-      TOTAL_PING_COUNT: pingCountTotal,
-      DAYS_SINCE_LAST_PING: daysSinceLastPing,
-    };
-    dsURI = dsURI.replace(/%([A-Z_]+)%/g, function(fullMatch, name) {
-      // Not all applications implement nsIXULAppInfo (e.g. xpcshell doesn't).
-      if (gAppVersion && (name == "APP_VERSION" || name == "VERSION")) {
-        return gAppVersion;
-      }
-      // Some items, like DAYS_SINCE_LAST_PING, can be undefined, so we can't just
-      // `return replacements[name] || fullMatch` or something like that.
-      if (!replacements.hasOwnProperty(name)) {
-        return fullMatch;
-      }
-      return replacements[name];
-    });
-    dsURI = dsURI.replace(/\+/g, "%2B");
-
-    // Under normal operations it will take around 5,883,516 years before the
-    // preferences used to store pingCountVersion and pingCountTotal will rollover
-    // so this code doesn't bother trying to do the "right thing" here.
-    if (pingCountVersion != "invalid") {
-      pingCountVersion++;
-      if (pingCountVersion > 2147483647) {
-        // Rollover to -1 if the value is greater than what is support by an
-        // integer preference. The -1 indicates that the counter has been reset.
-        pingCountVersion = -1;
-      }
-      Services.prefs.setIntPref(
-        PREF_BLOCKLIST_PINGCOUNTVERSION,
-        pingCountVersion
-      );
-    }
-
-    if (pingCountTotal != "invalid") {
-      pingCountTotal++;
-      if (pingCountTotal > 2147483647) {
-        // Rollover to 1 if the value is greater than what is support by an
-        // integer preference.
-        pingCountTotal = -1;
-      }
-      Services.prefs.setIntPref(PREF_BLOCKLIST_PINGCOUNTTOTAL, pingCountTotal);
-    }
-
-    // Verify that the URI is valid
-    try {
-      var uri = Services.io.newURI(dsURI);
-    } catch (e) {
-      LOG(
-        "Blocklist::notify: There was an error creating the blocklist URI\r\n" +
-          "for: " +
-          dsURI +
-          ", error: " +
-          e
-      );
-      return;
-    }
-
-    LOG("Blocklist::notify: Requesting " + uri.spec);
-    let request = new ServiceRequest({ mozAnon: true });
-    request.open("GET", uri.spec, true);
-    request.channel.notificationCallbacks = new CertUtils.BadCertHandler();
-    request.overrideMimeType("text/xml");
-
-    // The server will return a `304 Not Modified` response if the blocklist was
-    // not changed since last check.
-    const lastModified = Services.prefs.getCharPref(
-      PREF_BLOCKLIST_LAST_MODIFIED,
-      ""
-    );
-    if (lastModified) {
-      request.setRequestHeader("If-Modified-Since", lastModified);
-    } else {
-      request.setRequestHeader("Cache-Control", "no-cache");
-    }
-
-    request.addEventListener("error", event => this.onXMLError(event));
-    request.addEventListener("load", event => this.onXMLLoad(event));
-    request.send(null);
   },
 
   async onXMLLoad(aEvent) {
@@ -3005,10 +2859,6 @@ let Blocklist = {
       PREF_EM_LOGGING_ENABLED,
       false
     );
-    gBlocklistEnabled = Services.prefs.getBoolPref(
-      PREF_BLOCKLIST_ENABLED,
-      true
-    );
     gBlocklistLevel = Math.min(
       Services.prefs.getIntPref(PREF_BLOCKLIST_LEVEL, DEFAULT_LEVEL),
       MAX_BLOCK_LEVEL
@@ -3091,19 +2941,6 @@ let Blocklist = {
               false
             );
             break;
-          case PREF_BLOCKLIST_ENABLED:
-            gBlocklistEnabled = Services.prefs.getBoolPref(
-              PREF_BLOCKLIST_ENABLED,
-              true
-            );
-            // Historically, this only does something if we're using the XML blocklist,
-            // so check:
-            if (this._impl == BlocklistXML) {
-              this._impl._onBlocklistEnabledToggle();
-            } else {
-              this._impl._blocklistUpdated();
-            }
-            break;
           case PREF_BLOCKLIST_LEVEL:
             gBlocklistLevel = Math.min(
               Services.prefs.getIntPref(PREF_BLOCKLIST_LEVEL, DEFAULT_LEVEL),
diff --git a/toolkit/mozapps/extensions/content/aboutaddons.js b/toolkit/mozapps/extensions/content/aboutaddons.js
--- a/toolkit/mozapps/extensions/content/aboutaddons.js
+++ b/toolkit/mozapps/extensions/content/aboutaddons.js
@@ -504,22 +504,7 @@ var DiscoveryAPI = {
   },
 
   async _fetchRecommendedAddons(useClientId) {
-    let discoveryApiUrl = new URL(
-      Services.urlFormatter.formatURLPref(PREF_DISCOVERY_API_URL)
-    );
-
-    if (useClientId) {
-      let clientId = await ClientID.getClientIdHash();
-      discoveryApiUrl.searchParams.set("telemetry-client-id", clientId);
-    }
-    let res = await fetch(discoveryApiUrl.href, {
-      credentials: "omit",
-    });
-    if (!res.ok) {
       throw new Error(`Failed to fetch recommended add-ons, ${res.status}`);
-    }
-    let { results } = await res.json();
-    return results.map(details => new DiscoAddonWrapper(details));
   },
 };
 
@@ -2552,10 +2537,6 @@ customElements.define("addon-list", Addo
 
 class RecommendedAddonList extends HTMLElement {
   connectedCallback() {
-    if (this.isConnected) {
-      this.loadCardsIfNeeded();
-      this.updateCardsWithAddonManager();
-    }
     AddonManager.addAddonListener(this);
   }
 
diff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js
--- a/toolkit/mozapps/extensions/content/extensions.js
+++ b/toolkit/mozapps/extensions/content/extensions.js
@@ -2389,27 +2389,8 @@ var gDiscoverView = {
     url = Services.urlFormatter.formatURL(url);
 
     let setURL = async aURL => {
-      try {
-        this.homepageURL = Services.io.newURI(aURL);
-      } catch (e) {
         this.showError();
         notifyInitialized();
-        return;
-      }
-
-      this._browser.addProgressListener(this);
-
-      if (this.loaded) {
-        this._loadURL(
-          this.homepageURL.spec,
-          false,
-          notifyInitialized,
-          Services.scriptSecurityManager.getSystemPrincipal(),
-          await this.getClientHeader()
-        );
-      } else {
-        notifyInitialized();
-      }
     };
 
     if (!Services.prefs.getBoolPref(PREF_GETADDONS_CACHE_ENABLED)) {
diff --git a/toolkit/mozapps/extensions/internal/AddonRepository.jsm b/toolkit/mozapps/extensions/internal/AddonRepository.jsm
--- a/toolkit/mozapps/extensions/internal/AddonRepository.jsm
+++ b/toolkit/mozapps/extensions/internal/AddonRepository.jsm
@@ -339,7 +339,7 @@ var AddonRepository = {
    * Whether caching is currently enabled
    */
   get cacheEnabled() {
-    return Services.prefs.getBoolPref(PREF_GETADDONS_CACHE_ENABLED, false);
+    return false;
   },
 
   /**
@@ -459,55 +459,7 @@ var AddonRepository = {
    */
   _fetchPaged(ids, pref, handler) {
     let startURL = this._formatURLPref(pref, { IDS: ids.join(",") });
-    let results = [];
-    let idCheck = ids.map(id => {
-      if (id.startsWith("rta:")) {
-        return atob(id.split(":")[1]);
-      }
-      return id;
-    });
-
-    const fetchNextPage = url => {
-      return new Promise((resolve, reject) => {
-        let request = new ServiceRequest({ mozAnon: true });
-        request.mozBackgroundRequest = true;
-        request.open("GET", url, true);
-        request.responseType = "json";
-
-        request.addEventListener("error", aEvent => {
-          reject(new Error(`GET ${url} failed`));
-        });
-        request.addEventListener("timeout", aEvent => {
-          reject(new Error(`GET ${url} timed out`));
-        });
-        request.addEventListener("load", aEvent => {
-          let response = request.response;
-          if (!response || (request.status != 200 && request.status != 0)) {
-            reject(new Error(`GET ${url} failed (status ${request.status})`));
-            return;
-          }
-
-          try {
-            let newResults = handler(response.results).filter(e =>
-              idCheck.includes(e.id)
-            );
-            results.push(...newResults);
-          } catch (err) {
-            reject(err);
-          }
-
-          if (response.next) {
-            resolve(fetchNextPage(response.next));
-          }
-
-          resolve(results);
-        });
-
-        request.send(null);
-      });
-    };
-
-    return fetchNextPage(startURL);
+    return Promise.reject(new Error(`GET ${startURL} failed`));
   },
 
   /**
diff --git a/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm b/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
--- a/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
+++ b/toolkit/mozapps/extensions/internal/AddonUpdateChecker.jsm
@@ -273,29 +273,17 @@ function UpdateParser(aId, aUrl, aObserv
   this.observer = aObserver;
   this.url = aUrl;
 
-  let requireBuiltIn = Services.prefs.getBoolPref(
-    PREF_UPDATE_REQUIREBUILTINCERTS,
-    true
-  );
+  this.request = null;
+  this._doneAt = new Error("place holder");
 
-  logger.debug("Requesting " + aUrl);
-  try {
-    this.request = new ServiceRequest({ mozAnon: true });
-    this.request.open("GET", this.url, true);
-    this.request.channel.notificationCallbacks = new CertUtils.BadCertHandler(
-      !requireBuiltIn
-    );
-    this.request.channel.loadFlags |= Ci.nsIRequest.LOAD_BYPASS_CACHE;
-    // Prevent the request from writing to cache.
-    this.request.channel.loadFlags |= Ci.nsIRequest.INHIBIT_CACHING;
-    this.request.overrideMimeType("text/plain");
-    this.request.timeout = TIMEOUT;
-    this.request.addEventListener("load", () => this.onLoad());
-    this.request.addEventListener("error", () => this.onError());
-    this.request.addEventListener("timeout", () => this.onTimeout());
-    this.request.send(null);
-  } catch (e) {
-    logger.error("Failed to request update manifest", e);
+  if ("onUpdateCheckComplete" in this.observer) {
+    try {
+      this.observer.onUpdateCheckComplete([]);
+    } catch (e) {
+      logger.warn("onUpdateCheckComplete notification failed", e);
+    }
+  } else {
+    logger.warn("onUpdateCheckComplete may not properly cancel", new Error("stack marker"));
   }
 }
 
