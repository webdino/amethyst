diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1727,7 +1727,6 @@ var gBrowserInit = {
     // loading the frame script to ensure that we don't miss any
     // message sent between when the frame script is loaded and when
     // the listener is registered.
-    CaptivePortalWatcher.init();
     ZoomUI.init(window);
 
     let mm = window.getGroupMessageManager("browsers");
@@ -2109,8 +2108,6 @@ var gBrowserInit = {
       }
     }
 
-    CaptivePortalWatcher.delayedStartup();
-
     SessionStore.promiseAllWindowsRestored.then(() => {
       this._schedulePerWindowIdleTasks();
       document.documentElement.setAttribute("sessionrestored", "true");
@@ -2472,8 +2469,6 @@ var gBrowserInit = {
 
     gTabletModePageCounter.finish();
 
-    CaptivePortalWatcher.uninit();
-
     SidebarUI.uninit();
 
     DownloadsButton.uninit();
@@ -5828,7 +5823,6 @@ var TabsProgressListener = {
     gBrowser.readNotificationBox(aBrowser)?.removeTransientNotifications();
 
     FullZoom.onLocationChange(aLocationURI, false, aBrowser);
-    CaptivePortalWatcher.onLocationChange(aBrowser);
   },
 
   onLinkIconAvailable(browser, dataURI, iconURI) {
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -90,7 +90,6 @@
 <script>
   /* eslint-env mozilla/browser-window */
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", this);
-  Services.scriptloader.loadSubScript("chrome://browser/content/browser-captivePortal.js", this);
   if (AppConstants.MOZ_DATA_REPORTING) {
     Services.scriptloader.loadSubScript("chrome://browser/content/browser-data-submission-info-bar.js", this);
   }
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -39,7 +39,6 @@ browser.jar:
         content/browser/browser-a11yUtils.js          (content/browser-a11yUtils.js)
         content/browser/browser-addons.js             (content/browser-addons.js)
         content/browser/browser-allTabsMenu.js        (content/browser-allTabsMenu.js)
-        content/browser/browser-captivePortal.js      (content/browser-captivePortal.js)
         content/browser/browser-ctrlTab.js            (content/browser-ctrlTab.js)
         content/browser/browser-customization.js      (content/browser-customization.js)
         content/browser/browser-data-submission-info-bar.js (content/browser-data-submission-info-bar.js)
diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -98,7 +98,6 @@
 #include "nsIAuthPrompt.h"
 #include "nsIAuthPrompt2.h"
 #include "nsICachingChannel.h"
-#include "nsICaptivePortalService.h"
 #include "nsIChannel.h"
 #include "nsIChannelEventSink.h"
 #include "nsIClassOfService.h"
@@ -3859,13 +3858,6 @@ nsresult nsDocShell::LoadErrorPage(nsIUR
   }
   errorPageUrl.AppendLiteral("&c=UTF-8");
 
-  nsCOMPtr<nsICaptivePortalService> cps = do_GetService(NS_CAPTIVEPORTAL_CID);
-  int32_t cpsState;
-  if (cps && NS_SUCCEEDED(cps->GetState(&cpsState)) &&
-      cpsState == nsICaptivePortalService::LOCKED_PORTAL) {
-    errorPageUrl.AppendLiteral("&captive=true");
-  }
-
   // netError.xhtml's getDescription only handles the "d" parameter at the
   // end of the URL, so append it last.
   errorPageUrl.AppendLiteral("&d=");
diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -108,7 +108,6 @@
 #include "mozilla/layers/ImageBridgeChild.h"
 #include "mozilla/loader/ScriptCacheActors.h"
 #include "mozilla/media/MediaChild.h"
-#include "mozilla/net/CaptivePortalService.h"
 #include "mozilla/net/CookieServiceChild.h"
 #include "mozilla/net/DocumentChannelChild.h"
 #include "mozilla/net/HttpChannelChild.h"
@@ -1337,7 +1336,6 @@ void ContentChild::InitXPCOM(
   LocaleService::GetInstance()->AssignRequestedLocales(
       aXPCOMInit.requestedLocales());
 
-  RecvSetCaptivePortalState(aXPCOMInit.captivePortalState());
   RecvBidiKeyboardNotify(aXPCOMInit.isLangRTL(),
                          aXPCOMInit.haveBidiKeyboards());
 
@@ -2132,20 +2130,6 @@ mozilla::ipc::IPCResult ContentChild::Re
   return IPC_OK();
 }
 
-mozilla::ipc::IPCResult ContentChild::RecvSetCaptivePortalState(
-    const int32_t& aState) {
-  nsCOMPtr<nsICaptivePortalService> cps = do_GetService(NS_CAPTIVEPORTAL_CID);
-  if (!cps) {
-    return IPC_OK();
-  }
-
-  mozilla::net::CaptivePortalService* portal =
-      static_cast<mozilla::net::CaptivePortalService*>(cps.get());
-  portal->SetStateInChild(aState);
-
-  return IPC_OK();
-}
-
 void ContentChild::ActorDestroy(ActorDestroyReason why) {
   if (mForceKillTimer) {
     mForceKillTimer->Cancel();
diff --git a/dom/ipc/ContentChild.h b/dom/ipc/ContentChild.h
--- a/dom/ipc/ContentChild.h
+++ b/dom/ipc/ContentChild.h
@@ -294,7 +294,6 @@ class ContentChild final : public PConte
   mozilla::ipc::IPCResult RecvSetOffline(const bool& offline);
 
   mozilla::ipc::IPCResult RecvSetConnectivity(const bool& connectivity);
-  mozilla::ipc::IPCResult RecvSetCaptivePortalState(const int32_t& state);
 
   mozilla::ipc::IPCResult RecvBidiKeyboardNotify(const bool& isLangRTL,
                                                  const bool& haveBidiKeyboards);
diff --git a/dom/ipc/ContentParent.cpp b/dom/ipc/ContentParent.cpp
--- a/dom/ipc/ContentParent.cpp
+++ b/dom/ipc/ContentParent.cpp
@@ -188,7 +188,6 @@
 #include "nsIAppWindow.h"
 #include "nsIAsyncInputStream.h"
 #include "nsIBidiKeyboard.h"
-#include "nsICaptivePortalService.h"
 #include "nsICertOverrideService.h"
 #include "nsIClipboard.h"
 #include "nsIContentProcess.h"
@@ -638,7 +637,6 @@ static uint64_t gContentChildID = 1;
 static const char* sObserverTopics[] = {
     NS_IPC_IOSERVICE_SET_OFFLINE_TOPIC,
     NS_IPC_IOSERVICE_SET_CONNECTIVITY_TOPIC,
-    NS_IPC_CAPTIVE_PORTAL_SET_STATE,
     "application-background",
     "application-foreground",
     "memory-pressure",
@@ -2834,13 +2832,6 @@ bool ContentParent::InitInternal(Process
   rv = io->GetConnectivity(&xpcomInit.isConnected());
   MOZ_ASSERT(NS_SUCCEEDED(rv), "Failed getting connectivity?");
 
-  xpcomInit.captivePortalState() = nsICaptivePortalService::UNKNOWN;
-  nsCOMPtr<nsICaptivePortalService> cps =
-      do_GetService(NS_CAPTIVEPORTAL_CONTRACTID);
-  if (cps) {
-    cps->GetState(&xpcomInit.captivePortalState());
-  }
-
   nsIBidiKeyboard* bidi = nsContentUtils::GetBidiKeyboard();
 
   xpcomInit.isLangRTL() = false;
@@ -3557,17 +3548,6 @@ ContentParent::Observe(nsISupports* aSub
     if (!SendSetConnectivity(u"true"_ns.Equals(aData))) {
       return NS_ERROR_NOT_AVAILABLE;
     }
-  } else if (!strcmp(aTopic, NS_IPC_CAPTIVE_PORTAL_SET_STATE)) {
-    nsCOMPtr<nsICaptivePortalService> cps = do_QueryInterface(aSubject);
-    MOZ_ASSERT(cps, "Should QI to a captive portal service");
-    if (!cps) {
-      return NS_ERROR_FAILURE;
-    }
-    int32_t state;
-    cps->GetState(&state);
-    if (!SendSetCaptivePortalState(state)) {
-      return NS_ERROR_NOT_AVAILABLE;
-    }
   }
   // listening for alert notifications
   else if (!strcmp(aTopic, "alertfinished") ||
diff --git a/dom/ipc/PContent.ipdl b/dom/ipc/PContent.ipdl
--- a/dom/ipc/PContent.ipdl
+++ b/dom/ipc/PContent.ipdl
@@ -595,7 +595,6 @@ child:
 
     async SetOffline(bool offline);
     async SetConnectivity(bool connectivity);
-    async SetCaptivePortalState(int32_t aState);
 
     async NotifyVisited(VisitedQueryResult[] uri);
 
diff --git a/netwerk/base/IOActivityMonitor.cpp b/netwerk/base/IOActivityMonitor.cpp
--- a/netwerk/base/IOActivityMonitor.cpp
+++ b/netwerk/base/IOActivityMonitor.cpp
@@ -8,6 +8,7 @@
 #include "nsSocketTransport2.h"
 #include "nsSocketTransportService2.h"
 #include "nsThreadUtils.h"
+#include "mozilla/StaticPtr.h"
 #include "mozilla/dom/Promise.h"
 #include "prerror.h"
 #include "prio.h"
diff --git a/netwerk/base/IOActivityMonitor.h b/netwerk/base/IOActivityMonitor.h
--- a/netwerk/base/IOActivityMonitor.h
+++ b/netwerk/base/IOActivityMonitor.h
@@ -7,12 +7,14 @@
 #ifndef IOActivityMonitor_h___
 #define IOActivityMonitor_h___
 
+#include "mozilla/Mutex.h"
 #include "mozilla/dom/ChromeUtilsBinding.h"
 #include "nsCOMPtr.h"
 #include "nscore.h"
 #include "nsClassHashtable.h"
 #include "nsTHashMap.h"
 #include "nsHashKeys.h"
+#include "nsINamed.h"
 #include "nsISupports.h"
 #include "prinrval.h"
 #include "prio.h"
diff --git a/netwerk/base/NetworkConnectivityService.cpp b/netwerk/base/NetworkConnectivityService.cpp
--- a/netwerk/base/NetworkConnectivityService.cpp
+++ b/netwerk/base/NetworkConnectivityService.cpp
@@ -3,6 +3,7 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "NetworkConnectivityService.h"
+#include "mozilla/ClearOnShutdown.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Services.h"
 #include "xpcpublic.h"
diff --git a/netwerk/base/moz.build b/netwerk/base/moz.build
--- a/netwerk/base/moz.build
+++ b/netwerk/base/moz.build
@@ -23,7 +23,6 @@ XPIDL_SOURCES += [
     "nsICacheInfoChannel.idl",
     "nsICachingChannel.idl",
     "nsICancelable.idl",
-    "nsICaptivePortalService.idl",
     "nsIChannel.idl",
     "nsIChannelEventSink.idl",
     "nsIChildChannel.idl",
@@ -57,7 +56,6 @@ XPIDL_SOURCES += [
     "nsINestedURI.idl",
     "nsINetAddr.idl",
     "nsINetUtil.idl",
-    "nsINetworkConnectivityService.idl",
     "nsINetworkInfoService.idl",
     "nsINetworkInterceptController.idl",
     "nsINetworkLinkService.idl",
@@ -155,13 +153,11 @@ EXPORTS.mozilla += [
 ]
 
 EXPORTS.mozilla.net += [
-    "CaptivePortalService.h",
     "Dashboard.h",
     "DashboardTypes.h",
     "DefaultURI.h",
     "IOActivityMonitor.h",
     "MemoryDownloader.h",
-    "NetworkConnectivityService.h",
     "PartiallySeekableInputStream.h",
     "Predictor.h",
     "PrivateBrowsingChannel.h",
@@ -175,7 +171,6 @@ EXPORTS.mozilla.net += [
 UNIFIED_SOURCES += [
     "ArrayBufferInputStream.cpp",
     "BackgroundFileSaver.cpp",
-    "CaptivePortalService.cpp",
     "Dashboard.cpp",
     "DefaultURI.cpp",
     "EventTokenBucket.cpp",
@@ -183,7 +178,6 @@ UNIFIED_SOURCES += [
     "LoadContextInfo.cpp",
     "LoadInfo.cpp",
     "MemoryDownloader.cpp",
-    "NetworkConnectivityService.cpp",
     "NetworkDataCountLayer.cpp",
     "nsAsyncRedirectVerifyHelper.cpp",
     "nsAsyncStreamCopier.cpp",
diff --git a/netwerk/base/nsDownloader.cpp b/netwerk/base/nsDownloader.cpp
--- a/netwerk/base/nsDownloader.cpp
+++ b/netwerk/base/nsDownloader.cpp
@@ -4,6 +4,7 @@
 
 #include "nsDownloader.h"
 #include "nsIInputStream.h"
+#include "nsIOutputStream.h"
 #include "nsDirectoryServiceUtils.h"
 #include "nsDirectoryServiceDefs.h"
 #include "nsNetUtil.h"
diff --git a/netwerk/base/nsIOService.cpp b/netwerk/base/nsIOService.cpp
--- a/netwerk/base/nsIOService.cpp
+++ b/netwerk/base/nsIOService.cpp
@@ -48,8 +48,6 @@
 #include "mozilla/dom/ClientInfo.h"
 #include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/ServiceWorkerDescriptor.h"
-#include "mozilla/net/CaptivePortalService.h"
-#include "mozilla/net/NetworkConnectivityService.h"
 #include "mozilla/net/SocketProcessHost.h"
 #include "mozilla/net/SocketProcessParent.h"
 #include "mozilla/net/SSLTokensCache.h"
@@ -90,7 +88,6 @@ using mozilla::dom::ServiceWorkerDescrip
 
 nsIOService* gIOService;
 static bool gHasWarnedUploadChannel2;
-static bool gCaptivePortalEnabled = false;
 static LazyLogModule gIOServiceLog("nsIOService");
 #undef LOG
 #define LOG(args) MOZ_LOG(gIOServiceLog, LogLevel::Debug, args)
@@ -256,8 +253,6 @@ nsresult nsIOService::Init() {
 
   SSLTokensCache::Init();
 
-  InitializeCaptivePortalService();
-
   // setup our bad port list stuff
   for (int i = 0; gBadPortList[i]; i++) {
     mRestrictedPortList.AppendElement(gBadPortList[i]);
@@ -394,25 +389,6 @@ void nsIOService::OnTLSPrefChange(const 
   }
 }
 
-nsresult nsIOService::InitializeCaptivePortalService() {
-  if (XRE_GetProcessType() != GeckoProcessType_Default) {
-    // We only initalize a captive portal service in the main process
-    return NS_OK;
-  }
-
-  mCaptivePortalService = do_GetService(NS_CAPTIVEPORTAL_CID);
-  if (mCaptivePortalService) {
-    return static_cast<CaptivePortalService*>(mCaptivePortalService.get())
-        ->Initialize();
-  }
-
-  // Instantiate and initialize the service
-  RefPtr<NetworkConnectivityService> ncs =
-      NetworkConnectivityService::GetSingleton();
-
-  return NS_OK;
-}
-
 nsresult nsIOService::InitializeSocketTransportService() {
   nsresult rv = NS_OK;
 
@@ -697,53 +673,9 @@ NS_IMPL_ISUPPORTS(nsIOService, nsIIOServ
 
 ////////////////////////////////////////////////////////////////////////////////
 
-nsresult nsIOService::RecheckCaptivePortal() {
-  MOZ_ASSERT(NS_IsMainThread(), "Must be called on the main thread");
-  if (!mCaptivePortalService) {
-    return NS_OK;
-  }
-  nsCOMPtr<nsIRunnable> task = NewRunnableMethod(
-      "nsIOService::RecheckCaptivePortal", mCaptivePortalService,
-      &nsICaptivePortalService::RecheckCaptivePortal);
-  return NS_DispatchToMainThread(task);
-}
-
-nsresult nsIOService::RecheckCaptivePortalIfLocalRedirect(nsIChannel* newChan) {
-  nsresult rv;
-
-  if (!mCaptivePortalService) {
-    return NS_OK;
-  }
-
-  nsCOMPtr<nsIURI> uri;
-  rv = newChan->GetURI(getter_AddRefs(uri));
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  nsCString host;
-  rv = uri->GetHost(host);
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  NetAddr addr;
-  // If the redirect wasn't to an IP literal, so there's probably no need
-  // to trigger the captive portal detection right now. It can wait.
-  if (NS_SUCCEEDED(addr.InitFromString(host)) && addr.IsIPAddrLocal()) {
-    RecheckCaptivePortal();
-  }
-
-  return NS_OK;
-}
-
 nsresult nsIOService::AsyncOnChannelRedirect(
     nsIChannel* oldChan, nsIChannel* newChan, uint32_t flags,
     nsAsyncRedirectVerifyHelper* helper) {
-  // If a redirect to a local network address occurs, then chances are we
-  // are in a captive portal, so we trigger a recheck.
-  RecheckCaptivePortalIfLocalRedirect(newChan);
-
   // This is silly. I wish there was a simpler way to get at the global
   // reference of the contentSecurityManager. But it lives in the XPCOM
   // service registry.
@@ -1327,15 +1259,6 @@ nsresult nsIOService::SetConnectivityInt
   // we have statistic about network change event even if we are offline.
   mLastConnectivityChange = PR_IntervalNow();
 
-  if (mCaptivePortalService) {
-    if (aConnectivity && gCaptivePortalEnabled) {
-      // This will also trigger a captive portal check for the new network
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Start();
-    } else {
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-    }
-  }
-
   nsCOMPtr<nsIObserverService> observerService = services::GetObserverService();
   if (!observerService) {
     return NS_OK;
@@ -1470,19 +1393,6 @@ void nsIOService::PrefsChanged(const cha
     NS_WARNING_ASSERTION(!(size & (size - 1)),
                          "network segment size is not a power of 2!");
   }
-
-  if (!pref || strcmp(pref, NETWORK_CAPTIVE_PORTAL_PREF) == 0) {
-    nsresult rv = Preferences::GetBool(NETWORK_CAPTIVE_PORTAL_PREF,
-                                       &gCaptivePortalEnabled);
-    if (NS_SUCCEEDED(rv) && mCaptivePortalService) {
-      if (gCaptivePortalEnabled) {
-        static_cast<CaptivePortalService*>(mCaptivePortalService.get())
-            ->Start();
-      } else {
-        static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-      }
-    }
-  }
 }
 
 void nsIOService::ParsePortList(const char* pref, bool remove) {
@@ -1557,8 +1467,6 @@ nsIOService::NotifyWakeup() {
                                            (u"" NS_NETWORK_LINK_DATA_CHANGED));
   }
 
-  RecheckCaptivePortal();
-
   return NS_OK;
 }
 
@@ -1617,11 +1525,6 @@ nsIOService::Observe(nsISupports* subjec
 
     SetOffline(true);
 
-    if (mCaptivePortalService) {
-      static_cast<CaptivePortalService*>(mCaptivePortalService.get())->Stop();
-      mCaptivePortalService = nullptr;
-    }
-
     SSLTokensCache::Shutdown();
 
     DestroySocketProcess();
@@ -1786,9 +1689,6 @@ nsresult nsIOService::OnNetworkLinkEvent
   bool isUp = true;
   if (!strcmp(data, NS_NETWORK_LINK_DATA_CHANGED)) {
     mLastNetworkLinkChange = PR_IntervalNow();
-    // CHANGED means UP/DOWN didn't change
-    // but the status of the captive portal may have changed.
-    RecheckCaptivePortal();
     return NS_OK;
   }
   if (!strcmp(data, NS_NETWORK_LINK_DATA_DOWN)) {
diff --git a/netwerk/base/nsIOService.h b/netwerk/base/nsIOService.h
--- a/netwerk/base/nsIOService.h
+++ b/netwerk/base/nsIOService.h
@@ -21,7 +21,6 @@
 #include "mozilla/Attributes.h"
 #include "mozilla/Mutex.h"
 #include "prtime.h"
-#include "nsICaptivePortalService.h"
 #include "nsIObserverService.h"
 #include "nsTHashSet.h"
 #include "nsWeakReference.h"
@@ -119,9 +118,6 @@ class nsIOService final : public nsIIOSe
   void IncrementNetWonRequestNumber() { mNetWon++; }
   uint32_t GetNetWonRequestNumber() { return mNetWon; }
 
-  // Used to trigger a recheck of the captive portal status
-  nsresult RecheckCaptivePortal();
-
   void OnProcessLaunchComplete(SocketProcessHost* aHost, bool aSucceeded);
   void OnProcessUnexpectedShutdown(SocketProcessHost* aHost);
   bool SocketProcessReady();
@@ -162,9 +158,6 @@ class nsIOService final : public nsIIOSe
   nsresult CacheProtocolHandler(const char* scheme,
                                 nsIProtocolHandler* handler);
 
-  nsresult InitializeCaptivePortalService();
-  nsresult RecheckCaptivePortalIfLocalRedirect(nsIChannel* newChan);
-
   // Prefs wrangling
   static void PrefsChanged(const char* pref, void* self);
   void PrefsChanged(const char* pref = nullptr);
@@ -216,7 +209,6 @@ class nsIOService final : public nsIIOSe
   mozilla::Atomic<bool, mozilla::Relaxed> mHttpHandlerAlreadyShutingDown{false};
 
   nsCOMPtr<nsPISocketTransportService> mSocketTransportService;
-  nsCOMPtr<nsICaptivePortalService> mCaptivePortalService;
   nsCOMPtr<nsINetworkLinkService> mNetworkLinkService;
   bool mNetworkLinkServiceInitialized{false};
 
diff --git a/netwerk/base/nsLoadGroup.cpp b/netwerk/base/nsLoadGroup.cpp
--- a/netwerk/base/nsLoadGroup.cpp
+++ b/netwerk/base/nsLoadGroup.cpp
@@ -16,6 +16,7 @@
 #include "nsString.h"
 #include "nsTArray.h"
 #include "mozilla/Telemetry.h"
+#include "nsIDNSService.h"
 #include "nsIHttpChannelInternal.h"
 #include "nsITimedChannel.h"
 #include "nsIInterfaceRequestor.h"
diff --git a/netwerk/base/nsSyncStreamListener.cpp b/netwerk/base/nsSyncStreamListener.cpp
--- a/netwerk/base/nsSyncStreamListener.cpp
+++ b/netwerk/base/nsSyncStreamListener.cpp
@@ -4,6 +4,7 @@
 
 #include "mozilla/SpinEventLoopUntil.h"
 #include "nsIOService.h"
+#include "nsIPipe.h"
 #include "nsSyncStreamListener.h"
 #include "nsThreadUtils.h"
 #include <algorithm>
diff --git a/netwerk/build/components.conf b/netwerk/build/components.conf
--- a/netwerk/build/components.conf
+++ b/netwerk/build/components.conf
@@ -83,14 +83,6 @@ Classes = [
         'headers': ['/netwerk/base/nsBufferedStreams.h'],
     },
     {
-        'cid': '{bdbe0555-fc3d-4f7b-9205-c309ceb2d641}',
-        'contract_ids': ['@mozilla.org/network/captive-portal-service;1'],
-        'singleton': True,
-        'type': 'nsICaptivePortalService',
-        'constructor': 'mozilla::net::CaptivePortalService::GetSingleton',
-        'headers': ['mozilla/net/CaptivePortalService.h'],
-    },
-    {
         'cid': '{c79eb3c6-091a-45a6-8544-5a8d1ab79537}',
         'contract_ids': ['@mozilla.org/network/dashboard;1'],
         'type': 'mozilla::net::Dashboard',
@@ -221,14 +213,6 @@ Classes = [
         'headers': ['nsMIMEInputStream.h'],
     },
     {
-        'cid': '{2693457e-3ba5-4455-991f-5350946adb12}',
-        'contract_ids': ['@mozilla.org/network/network-connectivity-service;1'],
-        'singleton': True,
-        'type': 'nsINetworkConnectivityService',
-        'constructor': 'mozilla::net::NetworkConnectivityService::GetSingleton',
-        'headers': ['mozilla/net/NetworkConnectivityService.h'],
-    },
-    {
         'cid': '{969adfdf-7221-4419-aecf-05f8faf00c9b}',
         'contract_ids': ['@mozilla.org/network/predictor;1'],
         'singleton': True,
diff --git a/netwerk/dns/TRRQuery.cpp b/netwerk/dns/TRRQuery.cpp
--- a/netwerk/dns/TRRQuery.cpp
+++ b/netwerk/dns/TRRQuery.cpp
@@ -91,11 +91,7 @@ nsresult TRRQuery::DispatchLookup(TRR* p
     do {
       sendAgain = false;
       if ((TRRTYPE_AAAA == rectype) && gTRRService &&
-          (gTRRService->DisableIPv6() ||
-           (StaticPrefs::network_trr_skip_AAAA_when_not_supported() &&
-            mHostResolver->GetNCS() &&
-            mHostResolver->GetNCS()->GetIPv6() ==
-                nsINetworkConnectivityService::NOT_AVAILABLE))) {
+          gTRRService->DisableIPv6()) {
         break;
       }
       LOG(("TRR Resolve %s type %d\n", addrRec->host.get(), (int)rectype));
@@ -268,13 +264,6 @@ AHostResolver::LookupStatus TRRQuery::Co
     }
   }
 
-  if (mTRRSuccess && mHostResolver->GetNCS() &&
-      (mHostResolver->GetNCS()->GetNAT64() ==
-       nsINetworkConnectivityService::OK) &&
-      newRRSet) {
-    newRRSet = mHostResolver->GetNCS()->MapNAT64IPs(newRRSet);
-  }
-
   if (resolverType == DNSResolverType::TRR) {
     if (mTrrAUsed == OK) {
       AccumulateCategoricalKeyed(
diff --git a/netwerk/dns/TRRService.cpp b/netwerk/dns/TRRService.cpp
--- a/netwerk/dns/TRRService.cpp
+++ b/netwerk/dns/TRRService.cpp
@@ -7,7 +7,6 @@
 #include "nsCharSeparatedTokenizer.h"
 #include "nsComponentManagerUtils.h"
 #include "nsDirectoryServiceUtils.h"
-#include "nsICaptivePortalService.h"
 #include "nsIFile.h"
 #include "nsIParentalControlsService.h"
 #include "nsINetworkLinkService.h"
@@ -80,8 +79,6 @@ void TRRService::AddObserver(nsIObserver
   }
 
   if (observerService) {
-    observerService->AddObserver(aObserver, NS_CAPTIVE_PORTAL_CONNECTIVITY,
-                                 true);
     observerService->AddObserver(aObserver, kOpenCaptivePortalLoginEvent, true);
     observerService->AddObserver(aObserver, kClearPrivateData, true);
     observerService->AddObserver(aObserver, kPurge, true);
@@ -92,26 +89,6 @@ void TRRService::AddObserver(nsIObserver
   }
 }
 
-// static
-bool TRRService::CheckCaptivePortalIsPassed() {
-  bool result = false;
-  nsCOMPtr<nsICaptivePortalService> captivePortalService =
-      do_GetService(NS_CAPTIVEPORTAL_CID);
-  if (captivePortalService) {
-    int32_t captiveState;
-    MOZ_ALWAYS_SUCCEEDS(captivePortalService->GetState(&captiveState));
-
-    if ((captiveState == nsICaptivePortalService::UNLOCKED_PORTAL) ||
-        (captiveState == nsICaptivePortalService::NOT_CAPTIVE)) {
-      result = true;
-    }
-    LOG(("TRRService::Init mCaptiveState=%d mCaptiveIsPassed=%d\n",
-         captiveState, (int)result));
-  }
-
-  return result;
-}
-
 static void RemoveTRRBlocklistFile() {
   MOZ_ASSERT(NS_IsMainThread(), "Getting the profile dir on the main thread");
 
@@ -169,8 +146,6 @@ nsresult TRRService::Init() {
   mConfirmation.HandleEvent(ConfirmationEvent::Init);
 
   if (XRE_IsParentProcess()) {
-    mCaptiveIsPassed = CheckCaptivePortalIsPassed();
-
     mParentalControlEnabled = GetParentalControlEnabledInternal();
 
     mLinkService = do_GetService(NS_NETWORK_LINK_SERVICE_CONTRACTID);
@@ -267,9 +242,6 @@ bool TRRService::Enabled(nsIRequest::TRR
     return true;
   }
 
-  LOG(("TRRService::Enabled mConfirmation.mState=%d mCaptiveIsPassed=%d\n",
-       mConfirmation.State(), (int)mCaptiveIsPassed));
-
   if (StaticPrefs::network_trr_wait_for_confirmation()) {
     return mConfirmation.State() == CONFIRM_OK;
   }
@@ -605,28 +577,6 @@ TRRService::Observe(nsISupports* aSubjec
     if (prevConf == mConfirmation.TaskAddr()) {
       mConfirmation.HandleEvent(ConfirmationEvent::PrefChange);
     }
-  } else if (!strcmp(aTopic, kOpenCaptivePortalLoginEvent)) {
-    // We are in a captive portal
-    LOG(("TRRservice in captive portal\n"));
-    mCaptiveIsPassed = false;
-    mConfirmation.SetCaptivePortalStatus(
-        nsICaptivePortalService::LOCKED_PORTAL);
-  } else if (!strcmp(aTopic, NS_CAPTIVE_PORTAL_CONNECTIVITY)) {
-    nsAutoCString data = NS_ConvertUTF16toUTF8(aData);
-    LOG(("TRRservice captive portal was %s\n", data.get()));
-    nsCOMPtr<nsICaptivePortalService> cps = do_QueryInterface(aSubject);
-    if (cps) {
-      mConfirmation.SetCaptivePortalStatus(cps->State());
-    }
-
-    // If we were previously in a captive portal, this event means we will
-    // need to trigger confirmation again. Otherwise it's just a periodical
-    // captive-portal check that completed and we don't need to react to it.
-    if (!mCaptiveIsPassed) {
-      mConfirmation.HandleEvent(ConfirmationEvent::CaptivePortalConnectivity);
-    }
-
-    mCaptiveIsPassed = true;
   } else if (!strcmp(aTopic, kClearPrivateData) || !strcmp(aTopic, kPurge)) {
     // flush the TRR blocklist
     auto bl = mTRRBLStorage.Lock();
@@ -816,16 +766,6 @@ void TRRService::ConfirmationContext::Ha
       resetConfirmation();
       maybeConfirm("uri-change");
       break;
-    case ConfirmationEvent::CaptivePortalConnectivity:
-      // If we area already confirmed then we're fine.
-      // If there is a confirmation in progress, likely it started before
-      // we had full connectivity, so it may be hanging. We reset and try again.
-      if (mState == CONFIRM_FAILED || mState == CONFIRM_TRYING_FAILED ||
-          mState == CONFIRM_TRYING_OK) {
-        resetConfirmation();
-        maybeConfirm("cp-connectivity");
-      }
-      break;
     case ConfirmationEvent::NetworkUp:
       if (mState != CONFIRM_OK) {
         resetConfirmation();
@@ -1196,8 +1136,6 @@ void TRRService::ConfirmationContext::Re
                   ? (TimeStamp::Now() - mFirstRequestTime).ToMilliseconds()
                   : 0.0)},
       Telemetry::EventExtraEntry{"networkID"_ns, mNetworkId},
-      Telemetry::EventExtraEntry{"captivePortal"_ns,
-                                 nsPrintfCString("%i", mCaptivePortalStatus)},
   });
 
   if (mTrigger.Equals("failed-lookups"_ns)) {
diff --git a/netwerk/dns/TRRService.h b/netwerk/dns/TRRService.h
--- a/netwerk/dns/TRRService.h
+++ b/netwerk/dns/TRRService.h
@@ -13,7 +13,6 @@
 #include "nsWeakReference.h"
 #include "ODoHService.h"
 #include "TRRServiceBase.h"
-#include "nsICaptivePortalService.h"
 #include "nsTHashSet.h"
 #include "TRR.h"
 
@@ -84,7 +83,6 @@ class TRRService : public TRRServiceBase
   friend class ODoHService;
   static void AddObserver(nsIObserver* aObserver,
                           nsIObserverService* aObserverService = nullptr);
-  static bool CheckCaptivePortalIsPassed();
   static bool GetParentalControlEnabledInternal();
   static bool CheckPlatformDNSStatus(nsINetworkLinkService* aLinkService);
 
@@ -121,8 +119,6 @@ class TRRService : public TRRServiceBase
   nsCString mConfirmationNS{"example.com"_ns};
   nsCString mBootstrapAddr;
 
-  Atomic<bool, Relaxed> mCaptiveIsPassed{
-      false};  // set when captive portal check is passed
   Atomic<bool, Relaxed> mDisableIPv6;  // don't even try
 
   // TRR Blocklist storage
@@ -143,7 +139,6 @@ class TRRService : public TRRServiceBase
     Retry,
     FailedLookups,
     URIChange,
-    CaptivePortalConnectivity,
     NetworkUp,
     ConfirmOK,
     ConfirmFail,
@@ -214,8 +209,6 @@ class TRRService : public TRRServiceBase
     TimeStamp mFirstRequestTime;
     // The network ID at the start of the last confirmation attempt
     nsCString mNetworkId;
-    // Captive portal status at the time of recording.
-    int32_t mCaptivePortalStatus = nsICaptivePortalService::UNKNOWN;
 
     // The reason the confirmation context changed.
     nsCString mContextChangeReason;
@@ -245,10 +238,6 @@ class TRRService : public TRRServiceBase
     void HandleEvent(ConfirmationEvent aEvent);
     void HandleEvent(ConfirmationEvent aEvent, const MutexAutoLock&);
 
-    void SetCaptivePortalStatus(int32_t aStatus) {
-      mCaptivePortalStatus = aStatus;
-    }
-
     uintptr_t TaskAddr() { return uintptr_t(mTask.get()); }
 
    private:
@@ -307,10 +296,6 @@ class TRRService : public TRRServiceBase
       mConfirmation.HandleEvent(aEvent, lock);
     }
 
-    void SetCaptivePortalStatus(int32_t aStatus) {
-      mConfirmation.SetCaptivePortalStatus(aStatus);
-    }
-
     uintptr_t TaskAddr() { return mConfirmation.TaskAddr(); }
 
    private:
diff --git a/netwerk/dns/TRRServiceChild.cpp b/netwerk/dns/TRRServiceChild.cpp
--- a/netwerk/dns/TRRServiceChild.cpp
+++ b/netwerk/dns/TRRServiceChild.cpp
@@ -17,7 +17,7 @@ namespace net {
 
 static StaticRefPtr<nsIDNSService> sDNSService;
 
-void TRRServiceChild::Init(const bool& aCaptiveIsPassed,
+void TRRServiceChild::Init(
                            const bool& aParentalControlEnabled,
                            nsTArray<nsCString>&& aDNSSuffixList) {
   nsCOMPtr<nsIDNSService> dns =
@@ -27,7 +27,6 @@ void TRRServiceChild::Init(const bool& a
   MOZ_ASSERT(sDNSService);
   MOZ_ASSERT(gTRRService);
 
-  gTRRService->mCaptiveIsPassed = aCaptiveIsPassed;
   gTRRService->mParentalControlEnabled = aParentalControlEnabled;
   gTRRService->RebuildSuffixList(std::move(aDNSSuffixList));
 }
diff --git a/netwerk/dns/TRRServiceChild.h b/netwerk/dns/TRRServiceChild.h
--- a/netwerk/dns/TRRServiceChild.h
+++ b/netwerk/dns/TRRServiceChild.h
@@ -23,7 +23,7 @@ class TRRServiceChild : public PTRRServi
 
   explicit TRRServiceChild() = default;
 
-  void Init(const bool& aCaptiveIsPassed, const bool& aParentalControlEnabled,
+  void Init(const bool& aParentalControlEnabled,
             nsTArray<nsCString>&& aDNSSuffixList);
   mozilla::ipc::IPCResult RecvNotifyObserver(const nsCString& aTopic,
                                              const nsString& aData);
diff --git a/netwerk/dns/TRRServiceParent.cpp b/netwerk/dns/TRRServiceParent.cpp
--- a/netwerk/dns/TRRServiceParent.cpp
+++ b/netwerk/dns/TRRServiceParent.cpp
@@ -11,7 +11,6 @@
 #include "mozilla/psm/PSMIPCTypes.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Unused.h"
-#include "nsICaptivePortalService.h"
 #include "nsIParentalControlsService.h"
 #include "nsINetworkLinkService.h"
 #include "nsIObserverService.h"
@@ -48,7 +47,6 @@ void TRRServiceParent::Init() {
       static_cast<nsIObserverService*>(gIOService);
   TRRService::AddObserver(this, obs);
 
-  bool captiveIsPassed = TRRService::CheckCaptivePortalIsPassed();
   bool parentalControlEnabled = TRRService::GetParentalControlEnabledInternal();
 
   nsCOMPtr<nsINetworkLinkService> nls =
@@ -63,7 +61,7 @@ void TRRServiceParent::Init() {
   prefsChanged(nullptr);
 
   Unused << socketParent->SendPTRRServiceConstructor(
-      this, captiveIsPassed, parentalControlEnabled, suffixList);
+      this, parentalControlEnabled, suffixList);
 }
 
 NS_IMETHODIMP
diff --git a/netwerk/dns/nsHostResolver.cpp b/netwerk/dns/nsHostResolver.cpp
--- a/netwerk/dns/nsHostResolver.cpp
+++ b/netwerk/dns/nsHostResolver.cpp
@@ -181,7 +181,6 @@ nsresult nsHostResolver::Init() {
   LOG(("nsHostResolver::Init this=%p", this));
 
   mShutdown = false;
-  mNCS = NetworkConnectivityService::GetSingleton();
 
   // The preferences probably haven't been loaded from the disk yet, so we
   // need to register a callback that will set up the experiment once they
@@ -331,8 +330,6 @@ void nsHostResolver::Shutdown() {
     }
     // empty host database
     mRecordDB.Clear();
-
-    mNCS = nullptr;
   }
 
   // Shutdown the resolver threads, but with a timeout of 2 seconds (prefable).
@@ -855,25 +852,7 @@ nsresult nsHostResolver::TrrLookup(nsHos
   MOZ_ASSERT(!rec->mResolving);
 
   auto hasConnectivity = [this]() -> bool {
-    if (!mNCS) {
-      return true;
-    }
-    nsINetworkConnectivityService::ConnectivityState ipv4 = mNCS->GetIPv4();
-    nsINetworkConnectivityService::ConnectivityState ipv6 = mNCS->GetIPv6();
-
-    if (ipv4 == nsINetworkConnectivityService::OK ||
-        ipv6 == nsINetworkConnectivityService::OK) {
-      return true;
-    }
-
-    if (ipv4 == nsINetworkConnectivityService::UNKNOWN ||
-        ipv6 == nsINetworkConnectivityService::UNKNOWN) {
-      // One of the checks hasn't completed yet. Optimistically assume we'll
-      // have network connectivity.
-      return true;
-    }
-
-    return false;
+    return true;
   };
 
   nsIRequest::TRRMode reqMode = rec->mEffectiveTRRMode;
diff --git a/netwerk/dns/nsHostResolver.h b/netwerk/dns/nsHostResolver.h
--- a/netwerk/dns/nsHostResolver.h
+++ b/netwerk/dns/nsHostResolver.h
@@ -24,7 +24,6 @@
 #include "nsHostRecord.h"
 #include "nsRefPtrHashtable.h"
 #include "nsIThreadPool.h"
-#include "mozilla/net/NetworkConnectivityService.h"
 #include "mozilla/net/DNSByTypeRecord.h"
 #include "mozilla/Maybe.h"
 
@@ -127,7 +126,6 @@ class nsHostResolver : public nsISupport
                        nsResolveHostCallback* callback);
 
   nsHostRecord* InitRecord(const nsHostKey& key);
-  mozilla::net::NetworkConnectivityService* GetNCS() { return mNCS; }
 
   /**
    * return a resolved hard coded loopback dns record for the specified key
@@ -288,7 +286,6 @@ class nsHostResolver : public nsISupport
   mozilla::TimeDuration mShortIdleTimeout;
 
   RefPtr<nsIThreadPool> mResolverThreads;
-  RefPtr<mozilla::net::NetworkConnectivityService> mNCS;
   mozilla::net::HostRecordQueue mQueue;
   mozilla::Atomic<bool> mShutdown{true};
   mozilla::Atomic<uint32_t> mNumIdleTasks{0};
diff --git a/netwerk/ipc/PSocketProcess.ipdl b/netwerk/ipc/PSocketProcess.ipdl
--- a/netwerk/ipc/PSocketProcess.ipdl
+++ b/netwerk/ipc/PSocketProcess.ipdl
@@ -164,7 +164,7 @@ child:
   async PAltSvcTransaction(HttpConnectionInfoCloneArgs aConnInfo,
                            uint32_t aCaps);
   async ClearSessionCache();
-  async PTRRService(bool aCaptiveIsPassed,
+  async PTRRService(
                     bool aParentalControlEnabled,
                     nsCString[] aDNSSuffixList);
   async PNativeDNSResolverOverride();
diff --git a/netwerk/ipc/SocketProcessChild.cpp b/netwerk/ipc/SocketProcessChild.cpp
--- a/netwerk/ipc/SocketProcessChild.cpp
+++ b/netwerk/ipc/SocketProcessChild.cpp
@@ -455,17 +455,17 @@ mozilla::ipc::IPCResult SocketProcessChi
 }
 
 already_AddRefed<PTRRServiceChild> SocketProcessChild::AllocPTRRServiceChild(
-    const bool& aCaptiveIsPassed, const bool& aParentalControlEnabled,
+    const bool& aParentalControlEnabled,
     const nsTArray<nsCString>& aDNSSuffixList) {
   RefPtr<TRRServiceChild> actor = new TRRServiceChild();
   return actor.forget();
 }
 
 mozilla::ipc::IPCResult SocketProcessChild::RecvPTRRServiceConstructor(
-    PTRRServiceChild* aActor, const bool& aCaptiveIsPassed,
+    PTRRServiceChild* aActor,
     const bool& aParentalControlEnabled, nsTArray<nsCString>&& aDNSSuffixList) {
   static_cast<TRRServiceChild*>(aActor)->Init(
-      aCaptiveIsPassed, aParentalControlEnabled, std::move(aDNSSuffixList));
+      aParentalControlEnabled, std::move(aDNSSuffixList));
   return IPC_OK();
 }
 
diff --git a/netwerk/ipc/SocketProcessChild.h b/netwerk/ipc/SocketProcessChild.h
--- a/netwerk/ipc/SocketProcessChild.h
+++ b/netwerk/ipc/SocketProcessChild.h
@@ -117,10 +117,10 @@ class SocketProcessChild final
   mozilla::ipc::IPCResult RecvClearSessionCache();
 
   already_AddRefed<PTRRServiceChild> AllocPTRRServiceChild(
-      const bool& aCaptiveIsPassed, const bool& aParentalControlEnabled,
+      const bool& aParentalControlEnabled,
       const nsTArray<nsCString>& aDNSSuffixList);
   mozilla::ipc::IPCResult RecvPTRRServiceConstructor(
-      PTRRServiceChild* aActor, const bool& aCaptiveIsPassed,
+      PTRRServiceChild* aActor,
       const bool& aParentalControlEnabled,
       nsTArray<nsCString>&& aDNSSuffixList) override;
 
diff --git a/netwerk/protocol/http/nsHttpChannel.cpp b/netwerk/protocol/http/nsHttpChannel.cpp
--- a/netwerk/protocol/http/nsHttpChannel.cpp
+++ b/netwerk/protocol/http/nsHttpChannel.cpp
@@ -7009,13 +7009,6 @@ nsHttpChannel::OnStopRequest(nsIRequest*
     ReportHTTPSRRTelemetry(mHTTPSSVCRecord);
   }
 
-  // If this load failed because of a security error, it may be because we
-  // are in a captive portal - trigger an async check to make sure.
-  int32_t nsprError = -1 * NS_ERROR_GET_CODE(status);
-  if (mozilla::psm::IsNSSErrorCode(nsprError) && IsHTTPS()) {
-    gIOService->RecheckCaptivePortal();
-  }
-
   if (LoadTimingEnabled() && request == mCachePump) {
     mCacheReadEnd = TimeStamp::Now();
 
diff --git a/toolkit/components/moz.build b/toolkit/components/moz.build
--- a/toolkit/components/moz.build
+++ b/toolkit/components/moz.build
@@ -105,8 +105,6 @@ if CONFIG["BUILD_CTYPES"]:
 if CONFIG["MOZ_XUL"]:
     DIRS += ["autocomplete", "printingui", "satchel"]
 
-DIRS += ["captivedetect"]
-
 if CONFIG["OS_TARGET"] != "Android":
     DIRS += ["terminator"]
 
